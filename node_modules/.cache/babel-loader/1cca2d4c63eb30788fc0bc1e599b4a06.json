{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ChallengeList/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { titleCase } from '../Utils';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ChallengeList = () => {\n  const dispatch = useDispatch();\n  const [challengeSelected, setChallengeSelected] = useState('');\n  const dataAuth = useSelector(state => state.data.auth);\n  const {\n    data\n  } = useFetch('/contents/challenges');\n  const handleSelectChange = useCallback(id => {\n    var _document$getElementB;\n\n    const challenges = (_document$getElementB = document.getElementById('listOfChallenges')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.childNodes;\n    challenges === null || challenges === void 0 ? void 0 : challenges.forEach(challenge => {\n      if (challenge.isEqualNode(document.getElementById(id.toString()))) {\n        data === null || data === void 0 ? void 0 : data.forEach(selectedChallenge => {\n          var _challenge$firstChild;\n\n          const selectedChallengeName = selectedChallenge.name.split('_').join(' ');\n\n          if (titleCase(selectedChallengeName) === ((_challenge$firstChild = challenge.firstChild) === null || _challenge$firstChild === void 0 ? void 0 : _challenge$firstChild.textContent)) {\n            console.log('HERE', selectedChallengeName);\n            setChallengeSelected(id.toString());\n            const newChallenge = {\n              data: {\n                auth: dataAuth,\n                challenge: {\n                  name: selectedChallengeName\n                }\n              }\n            };\n            console.log(newChallenge);\n            dispatch({\n              type: 'CHALLENGE',\n              data: newChallenge\n            });\n          }\n        });\n      }\n    });\n  }, [data, dataAuth, dispatch]);\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Challenges\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfChallenges\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.filter(challenge => {\n    return challenge.name !== 'requirements.txt';\n  }).map((challenge, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleSelectChange(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    selected: challengeSelected === i.toString(),\n    challengeName: challenge.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default ChallengeList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ChallengeList/index.tsx"],"names":["React","useCallback","useState","ContainerList","Category","ChallengeButton","useFetch","titleCase","useSelector","useDispatch","ChallengeList","dispatch","challengeSelected","setChallengeSelected","dataAuth","state","data","auth","handleSelectChange","id","challenges","document","getElementById","childNodes","forEach","challenge","isEqualNode","toString","selectedChallenge","selectedChallengeName","name","split","join","firstChild","textContent","console","log","newChallenge","type","filter","map","i"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\n\nimport { useFetch } from 'src/hooks/useFetch'\nimport { titleCase } from '../Utils'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Challenge {\n    name: string;\n}\n\nconst ChallengeList: React.FC = () => {\n  const dispatch = useDispatch()\n  const [challengeSelected, setChallengeSelected] = useState('')\n  const dataAuth = useSelector((state: any) => state.data.auth)\n\n  const { data } = useFetch<Challenge[]>('/contents/challenges')\n  const handleSelectChange = useCallback(\n    (id: number) => {\n      const challenges = document.getElementById('listOfChallenges')?.childNodes\n        challenges?.forEach((challenge) => {\n          if (\n            challenge.isEqualNode(\n              document.getElementById(id.toString())\n            )\n          ) {\n                data?.forEach((selectedChallenge) => {\n                  const selectedChallengeName = selectedChallenge.name\n                    .split('_')\n                    .join(' ')\n                  if (\n                    titleCase(selectedChallengeName) ===\n                        challenge.firstChild?.textContent\n                  ) {\n                    console.log('HERE', selectedChallengeName)\n                    setChallengeSelected(id.toString())\n                    const newChallenge = {\n                      data: {\n                        auth: dataAuth,\n                        challenge: { name: selectedChallengeName }\n                      }\n                    }\n                    console.log(newChallenge)\n                    dispatch({ type: 'CHALLENGE', data: newChallenge })\n                  }\n                })\n          }\n        })\n    },\n    [data, dataAuth, dispatch]\n  )\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Challenges</span>\n      </Category>\n      <div id='listOfChallenges'>\n        {data?.filter((challenge: any) => {\n          return challenge.name !== 'requirements.txt'\n        })\n        .map((challenge, i) => (\n          <div\n            key={i}\n            id={i.toString()}\n            onClick={() => handleSelectChange(i)}\n          >\n            <ChallengeButton\n              selected={\n                challengeSelected === i.toString()\n              }\n              challengeName={challenge.name}\n            />\n          </div>\n        ))}\n      </div>\n    </ContainerList>\n  )\n}\n\nexport default ChallengeList\n"]},"metadata":{},"sourceType":"module"}