{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/UserList/index.tsx\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport base64 from 'base-64';\nimport { Container, Role, User, Avatar } from './styles';\n\nconst UserRow = ({\n  user,\n  score\n}) => {\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    src: base64.decode(user.imageUrl),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, user.firstName, \" \", user.lastName), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const challengeName = useSelector(state => state.data.selectedChallenge.name);\n  const globalScore = useSelector(state => state.data.globalScore);\n  const listOfUsers = useSelector(state => state.data.listOfUsers);\n  const challengeScore = useSelector(state => state.data.challengeScore);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, challengeName ? /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 30\n    }\n  }, challengeName.split('/').join(' ').split('_').join(' ')) : /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 103\n    }\n  }, \"Global\"), challengeScore && challengeScore.length > 0 && listOfUsers ? challengeScore.map(function (element, i) {\n    const getUser = listOfUsers.filter(element2 => {\n      return element2.userId === element.userId;\n    });\n    const user = getUser.pop();\n\n    if (user) {\n      return /*#__PURE__*/React.createElement(UserRow, {\n        key: i,\n        user: user,\n        score: element.score,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 32\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }) : globalScore && listOfUsers && !challengeName ? globalScore.map(function (element, i) {\n    const getUser = listOfUsers.filter(element2 => {\n      return element2.userId === element.userId;\n    });\n    const user = getUser.pop();\n\n    if (user) {\n      return /*#__PURE__*/React.createElement(UserRow, {\n        key: i,\n        user: user,\n        score: element.score,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 32\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/UserList/index.tsx"],"names":["React","useSelector","base64","Container","Role","User","Avatar","UserRow","user","score","decode","imageUrl","firstName","lastName","UserList","challengeName","state","data","selectedChallenge","name","globalScore","listOfUsers","challengeScore","split","join","length","map","element","i","getUser","filter","element2","userId","pop"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\nimport base64 from 'base-64'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n    userId?: string;\n    user: UserApi;\n    score: number;\n}\n\ninterface UserApi {\n    userId: string;\n    firstName: string;\n    lastName: string;\n    imageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ user, score }) => {\n    return (\n        <User>\n            <Avatar src={base64.decode(user.imageUrl)} />\n            <strong>{user.firstName} {user.lastName}</strong>\n            <span>{score}</span>\n        </User>\n    )\n}\n\nconst UserList: React.FC = () => {\n    const challengeName: string = useSelector((state: any) => state.data.selectedChallenge.name)\n    const globalScore: User[] = useSelector((state: any) => state.data.globalScore)\n    const listOfUsers: UserApi[] = useSelector((state: any) => state.data.listOfUsers)\n    const challengeScore: User[] = useSelector((state: any) => state.data.challengeScore)\n\n    return (\n        <Container>\n            {challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role>}\n            {challengeScore && challengeScore.length > 0 && listOfUsers ? (\n                challengeScore.map(function (element, i) {\n                    const getUser: UserApi[] = listOfUsers.filter((element2) => {\n                        return element2.userId === element.userId\n                    })\n                    const user = getUser.pop()\n                    if (user) {\n                        return <UserRow key={i} user={user} score={element.score} />\n                    } else {\n                        return <></>\n                    }\n                })\n            ) : globalScore && listOfUsers && !challengeName ? (\n                globalScore.map(function (element, i) {\n                    const getUser: UserApi[] = listOfUsers.filter((element2) => {\n                        return element2.userId === element.userId\n                    })\n                    const user = getUser.pop()\n                    if (user) {\n                        return <UserRow key={i} user={user} score={element.score} />\n                    } else {\n                        return <></>\n                    }\n                })\n            ) : (\n                <></>\n            )}\n        </Container>\n    )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}