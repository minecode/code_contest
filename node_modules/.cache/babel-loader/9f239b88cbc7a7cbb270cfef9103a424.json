{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/Authentication/index.tsx\";\nimport React from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { useDispatch, useSelector } from 'react-redux';\nimport base64 from 'base-64';\nimport apiDatabase from '../../services/apiDatabase';\nimport { Auth, BtnGoogle } from './styles';\n\nconst Authentication = () => {\n  const data = useSelector(state => state.data);\n  const authentication = data.auth.authenticated;\n  const dataSelectedChallenge = data.selectedChallenge;\n  console.log('Authentication', dataSelectedChallenge);\n  const dataGlobalScore = data.globalScore;\n  const dataListOfUsers = data.listOfUsers;\n  const dataChallengeScore = data.challengeScore;\n  const dataUserScore = data.userScore;\n  const dataChallengeIndex = data.challengeIndex;\n  const dispatch = useDispatch();\n\n  const login = async response => {\n    const newData = data;\n    newData.data.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl\n      },\n      token: response.tokenId\n    };\n    await apiDatabase.post(`/user/${response.googleId}/${response.profileObj.givenName}/${response.profileObj.familyName}/${base64.encode(response.profileObj.imageUrl)}`);\n    dispatch({\n      type: 'LOGIN',\n      data: newAuth\n    });\n  };\n\n  const badResponseGoogle = response => {\n    console.log(response);\n    dispatch({\n      type: 'BAD_RESPONSE',\n      data: null\n    });\n  };\n\n  const logout = () => {\n    const newAuth = {\n      data: {\n        auth: {\n          authenticated: false,\n          user: {\n            id: null,\n            name: null,\n            surname: null,\n            image: null\n          },\n          token: null\n        },\n        selectedChallenge: dataSelectedChallenge,\n        globalScore: dataGlobalScore,\n        listOfUsers: dataListOfUsers,\n        challengeScore: dataChallengeScore,\n        userScore: dataUserScore,\n        challengeIndex: dataChallengeIndex\n      }\n    };\n    dispatch({\n      type: 'LOGOUT',\n      data: newAuth\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Auth, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, authentication ? /*#__PURE__*/React.createElement(GoogleLogout, {\n    clientId: \"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\",\n    buttonText: \"Logout\",\n    onLogoutSuccess: logout,\n    className: \"BtnGoogle\",\n    render: renderProps => /*#__PURE__*/React.createElement(BtnGoogle, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Logout\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: \"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\",\n    buttonText: \"Login\",\n    onSuccess: login,\n    onFailure: badResponseGoogle,\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true,\n    render: renderProps => /*#__PURE__*/React.createElement(BtnGoogle, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \"Sign In w/ Google\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Authentication;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Authentication/index.tsx"],"names":["React","GoogleLogin","GoogleLogout","useDispatch","useSelector","base64","apiDatabase","Auth","BtnGoogle","Authentication","data","state","authentication","auth","authenticated","dataSelectedChallenge","selectedChallenge","console","log","dataGlobalScore","globalScore","dataListOfUsers","listOfUsers","dataChallengeScore","challengeScore","dataUserScore","userScore","dataChallengeIndex","challengeIndex","dispatch","login","response","newData","user","id","googleId","name","profileObj","givenName","surname","familyName","image","imageUrl","token","tokenId","post","encode","type","newAuth","badResponseGoogle","logout","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { GoogleLogin, GoogleLogout } from 'react-google-login'\nimport { useDispatch, useSelector } from 'react-redux'\nimport base64 from 'base-64'\nimport apiDatabase from '../../services/apiDatabase'\n\nimport { Auth, BtnGoogle } from './styles'\n\nconst Authentication: React.FC = () => {\n  const data = useSelector((state: any) => state.data)\n  const authentication = data.auth.authenticated\n  const dataSelectedChallenge = data.selectedChallenge\n  console.log('Authentication', dataSelectedChallenge)\n  const dataGlobalScore = data.globalScore\n  const dataListOfUsers = data.listOfUsers\n  const dataChallengeScore = data.challengeScore\n  const dataUserScore = data.userScore\n  const dataChallengeIndex = data.challengeIndex\n\n  const dispatch = useDispatch()\n\n  const login = async (response: any) => {\n    const newData = data\n    newData.data.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl\n      },\n      token: response.tokenId\n    }\n    await apiDatabase.post(`/user/${response.googleId}/${response.profileObj.givenName}/${response.profileObj.familyName}/${base64.encode(response.profileObj.imageUrl)}`)\n\n    dispatch({ type: 'LOGIN', data: newAuth })\n  }\n\n  const badResponseGoogle = (response: any) => {\n    console.log(response)\n    dispatch({ type: 'BAD_RESPONSE', data: null })\n  }\n\n  const logout = () => {\n    const newAuth = {\n      data: {\n        auth: {\n          authenticated: false,\n          user: {\n            id: null,\n            name: null,\n            surname: null,\n            image: null\n          },\n          token: null\n        },\n        selectedChallenge: dataSelectedChallenge,\n        globalScore: dataGlobalScore,\n        listOfUsers: dataListOfUsers,\n        challengeScore: dataChallengeScore,\n        userScore: dataUserScore,\n        challengeIndex: dataChallengeIndex\n      }\n    }\n    dispatch({ type: 'LOGOUT', data: newAuth })\n  }\n\n  return (\n    <Auth>\n      {authentication ? (\n        <GoogleLogout\n          clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n          buttonText='Logout'\n          onLogoutSuccess={logout}\n          className=\"BtnGoogle\"\n          render={renderProps => (\n            <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>Logout</BtnGoogle>\n          )}\n        ></GoogleLogout>\n      ) : (\n        <GoogleLogin\n          clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n          buttonText='Login'\n          onSuccess={login}\n          onFailure={badResponseGoogle}\n          cookiePolicy={'single_host_origin'}\n          isSignedIn={true}\n          render={renderProps => (\n            <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>Sign In w/ Google</BtnGoogle>\n          )}\n        />\n      )}\n    </Auth>\n  )\n}\n\nexport default Authentication\n"]},"metadata":{},"sourceType":"module"}