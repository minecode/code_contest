{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { Container, Grid, ContainerList, Category } from './styles';\nimport ChallengeInfo from '../ChallengeInfo';\nimport ChallengeButton from '../ChallengeButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport Drop from '../Drop';\nimport { titleCase } from '../Utils';\n\nconst Challenge = ({\n  loggedIn\n}) => {\n  const [challengeName, setChallengeName] = useState('');\n  const [challengeSelected, setChallengeSelected] = useState('');\n  const {\n    data\n  } = useFetch('/contents/challenges');\n  const handleSelectChange = useCallback(id => {\n    var _document$getElementB;\n\n    const challenges = (_document$getElementB = document.getElementById('listOfChallenges')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.childNodes;\n    challenges === null || challenges === void 0 ? void 0 : challenges.forEach(challenge => {\n      if (challenge.isEqualNode(document.getElementById(id.toString()))) {\n        data === null || data === void 0 ? void 0 : data.forEach(selectedChallenge => {\n          var _challenge$firstChild;\n\n          const selectedChallengeName = selectedChallenge.name.split('_').join(' ');\n\n          if (titleCase(selectedChallengeName) === ((_challenge$firstChild = challenge.firstChild) === null || _challenge$firstChild === void 0 ? void 0 : _challenge$firstChild.textContent)) {\n            setChallengeName(selectedChallengeName);\n            setChallengeSelected(id.toString());\n          }\n        });\n      }\n    });\n  }, [data]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Challenges\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfChallenges\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 6\n    }\n  }, data === null || data === void 0 ? void 0 : data.filter(challenge => {\n    return challenge.name !== 'requirements.txt';\n  }).map((challenge, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleSelectChange(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: challenge.name.split('_').join(' '),\n    selected: challengeSelected === i.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }))))), challengeName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChallengeInfo, {\n    challengeName: challengeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), loggedIn ? /*#__PURE__*/React.createElement(Drop, {\n    challengeName: challengeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 8\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n};\n\nexport default Challenge;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx"],"names":["React","useCallback","useState","Container","Grid","ContainerList","Category","ChallengeInfo","ChallengeButton","useFetch","Drop","titleCase","Challenge","loggedIn","challengeName","setChallengeName","challengeSelected","setChallengeSelected","data","handleSelectChange","id","challenges","document","getElementById","childNodes","forEach","challenge","isEqualNode","toString","selectedChallenge","selectedChallengeName","name","split","join","firstChild","textContent","filter","map","i"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport { Container, Grid, ContainerList, Category } from './styles';\n\nimport ChallengeInfo from '../ChallengeInfo';\nimport ChallengeButton from '../ChallengeButton';\n\nimport { useFetch } from 'src/hooks/useFetch';\nimport Drop from '../Drop';\nimport { titleCase } from '../Utils';\n\ninterface Challenge {\n\tname: string;\n}\n\nexport interface Props {\n\tloggedIn: Boolean;\n}\n\nconst Challenge: React.FC<Props> = ({ loggedIn }) => {\n\tconst [challengeName, setChallengeName] = useState('');\n\tconst [challengeSelected, setChallengeSelected] = useState('');\n\n\tconst { data } = useFetch<Challenge[]>('/contents/challenges');\n\tconst handleSelectChange = useCallback(\n\t\t(id: number) => {\n\t\t\tconst challenges = document.getElementById('listOfChallenges')\n\t\t\t\t?.childNodes;\n\t\t\tchallenges?.forEach((challenge) => {\n\t\t\t\tif (\n\t\t\t\t\tchallenge.isEqualNode(\n\t\t\t\t\t\tdocument.getElementById(id.toString())\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tdata?.forEach((selectedChallenge) => {\n\t\t\t\t\t\tconst selectedChallengeName = selectedChallenge.name\n\t\t\t\t\t\t\t.split('_')\n\t\t\t\t\t\t\t.join(' ');\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttitleCase(selectedChallengeName) ===\n\t\t\t\t\t\t\tchallenge.firstChild?.textContent\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsetChallengeName(selectedChallengeName);\n\t\t\t\t\t\t\tsetChallengeSelected(id.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t[data]\n\t);\n\n\treturn (\n\t\t<Container>\n\t\t\t<Grid>\n\t\t\t\t<ContainerList>\n\t\t\t\t\t<Category>\n\t\t\t\t\t\t<span>Challenges</span>\n\t\t\t\t\t</Category>\n\t\t\t\t\t<div id='listOfChallenges'>\n\t\t\t\t\t\t{data\n\t\t\t\t\t\t\t?.filter((challenge: any) => {\n\t\t\t\t\t\t\t\treturn challenge.name !== 'requirements.txt';\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.map((challenge, i) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tid={i.toString()}\n\t\t\t\t\t\t\t\t\tonClick={() => handleSelectChange(i)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ChallengeButton\n\t\t\t\t\t\t\t\t\t\tchallengeName={challenge.name\n\t\t\t\t\t\t\t\t\t\t\t.split('_')\n\t\t\t\t\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\t\t\t\t\tselected={\n\t\t\t\t\t\t\t\t\t\t\tchallengeSelected === i.toString()\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</ContainerList>\n\t\t\t\t{challengeName ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<ChallengeInfo challengeName={challengeName} />\n\t\t\t\t\t\t{loggedIn ? (\n\t\t\t\t\t\t\t<Drop challengeName={challengeName} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<></>\n\t\t\t\t)}\n\t\t\t</Grid>\n\t\t</Container>\n\t);\n};\n\nexport default Challenge;\n"]},"metadata":{},"sourceType":"module"}