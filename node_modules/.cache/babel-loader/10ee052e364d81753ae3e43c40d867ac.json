{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const dataAuth = useSelector(state => state.data.auth);\n  const {\n    data\n  } = useFetch('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n  const handleSelectChange = useCallback((id, contest) => {\n    var _document$getElementB;\n\n    const challenges = (_document$getElementB = document.getElementById('listOfContests')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.childNodes;\n    challenges === null || challenges === void 0 ? void 0 : challenges.forEach(challenge => {\n      if (challenge.isEqualNode(document.getElementById(id.toString()))) {\n        data === null || data === void 0 ? void 0 : data.tree.forEach(selectedChallenge => {\n          if (selectedChallenge.path.split('/').length === 2) {\n            const newChallenge = {\n              data: {\n                auth: dataAuth,\n                challenge: {\n                  name: `${contest}`\n                }\n              }\n            };\n            dispatch({\n              type: 'CHALLENGE',\n              data: newChallenge\n            });\n          }\n        });\n      }\n    });\n  }, [data, dataAuth, dispatch]);\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.tree.filter((contest, i) => {\n    return contest.path.split('/').length === 1 || contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt';\n  }).map((contest, i) => /*#__PURE__*/React.createElement(React.Fragment, null, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(ContestButton, {\n    key: i,\n    contestName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 53\n    }\n  }) : contest.path.split('/').length === 2 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleSelectChange(i, contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 56\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","ContainerList","Category","ChallengeButton","ContestButton","useFetch","useSelector","useDispatch","ContestList","dispatch","dataAuth","state","data","auth","handleSelectChange","id","contest","challenges","document","getElementById","childNodes","forEach","challenge","isEqualNode","toString","tree","selectedChallenge","path","split","length","newChallenge","name","type","filter","i","map"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\nimport ContestButton from '../ContestButton'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { titleCase } from '../Utils'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n  tree: Challenge []\n}\n\ninterface Challenge {\n  path: string;\n}\n\nconst ContestList: React.FC = () => {\n  const dispatch = useDispatch()\n  const dataAuth = useSelector((state: any) => state.data.auth)\n\n  const { data } = useFetch<Contest>('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"')\n  const handleSelectChange = useCallback(\n    (id: number, contest: string) => {\n      const challenges = document.getElementById('listOfContests')?.childNodes\n        challenges?.forEach((challenge) => {\n          if (\n            challenge.isEqualNode(\n              document.getElementById(id.toString())\n            )\n          ) {\n                data?.tree.forEach((selectedChallenge) => {\n                  if (selectedChallenge.path.split('/').length === 2) {\n                    const newChallenge = {\n                      data: {\n                        auth: dataAuth,\n                        challenge: { name: `${contest}` }\n                      }\n                    }\n                    dispatch({ type: 'CHALLENGE', data: newChallenge })\n                  }\n                })\n          }\n        })\n    },\n    [data, dataAuth, dispatch]\n  )\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Contests</span>\n      </Category>\n      <div id='listOfContests'>\n        {data?.tree.filter((contest, i) => {\n          return (contest.path.split('/').length === 1 || (contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt'))\n        }).map((contest, i) => (\n          <>\n            {contest.path.split('/').length === 1 ? <ContestButton key={i} contestName={contest.path}></ContestButton>\n              : contest.path.split('/').length === 2 ? <div\n                key={i}\n                id={i.toString()}\n                onClick={() => handleSelectChange(i, contest.path)}\n              >\n                <ChallengeButton\n                  challengeName={contest.path}\n                />\n              </div> : <></>\n            }\n          </>\n        ))}\n      </div>\n    </ContainerList>\n  )\n}\n\nexport default ContestList\n"]},"metadata":{},"sourceType":"module"}