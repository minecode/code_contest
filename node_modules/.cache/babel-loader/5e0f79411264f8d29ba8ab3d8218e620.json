{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const dataAuth = useSelector(state => state.data.auth);\n  const {\n    data\n  } = useFetch('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n  const handleSelectChange = useCallback(contest => {\n    const newChallenge = {\n      data: {\n        auth: dataAuth,\n        challenge: {\n          name: `${contest}`\n        }\n      }\n    };\n    dispatch({\n      type: 'CHALLENGE',\n      data: newChallenge\n    });\n  }, [dataAuth, dispatch]);\n  const handleVisibleContest = useCallback(contest => {\n    const challenges = document.getElementsByClassName(contest.split('/')[0]);\n\n    for (let index = 0; index < challenges.length; index++) {\n      const element = challenges[index];\n      console.log(element.attributes);\n    }\n  }, [dataAuth, dispatch]);\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.tree.filter((contest, i) => {\n    return contest.path.split('/').length === 1 || contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt';\n  }).map((contest, i) => /*#__PURE__*/React.createElement(React.Fragment, null, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(ContestButton, {\n    contestName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 14\n    }\n  })) : contest.path.split('/').length === 2 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split('/')[0],\n    onClick: () => handleSelectChange(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 56\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","ContainerList","Category","ChallengeButton","ContestButton","useFetch","useSelector","useDispatch","ContestList","dispatch","dataAuth","state","data","auth","handleSelectChange","contest","newChallenge","challenge","name","type","handleVisibleContest","challenges","document","getElementsByClassName","split","index","length","element","console","log","attributes","tree","filter","i","path","map","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,UAAxC;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAUA,MAAMC,WAAqB,GAAG,MAAM;AAClC,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMG,QAAQ,GAAGJ,WAAW,CAAEK,KAAD,IAAgBA,KAAK,CAACC,IAAN,CAAWC,IAA5B,CAA5B;AAEA,QAAM;AAAED,IAAAA;AAAF,MAAWP,QAAQ,CAAU,sEAAV,CAAzB;AACA,QAAMS,kBAAkB,GAAGd,WAAW,CACnCe,OAAD,IAAqB;AACnB,UAAMC,YAAY,GAAG;AACnBJ,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEH,QADF;AAEJO,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAG,GAAEH,OAAQ;AAAnB;AAFP;AADa,KAArB;AAMAN,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAE,WAAR;AAAqBP,MAAAA,IAAI,EAAEI;AAA3B,KAAD,CAAR;AACD,GATmC,EAUpC,CAACN,QAAD,EAAWD,QAAX,CAVoC,CAAtC;AAaA,QAAMW,oBAAoB,GAAGpB,WAAW,CACrCe,OAAD,IAAqB;AACnB,UAAMM,UAAU,GAAGC,QAAQ,CAACC,sBAAT,CAAgCR,OAAO,CAACS,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAhC,CAAnB;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGJ,UAAU,CAACK,MAAvC,EAA+CD,KAAK,EAApD,EAAwD;AACtD,YAAME,OAAO,GAAGN,UAAU,CAACI,KAAD,CAA1B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,UAApB;AACD;AACF,GAPqC,EAQtC,CAACpB,QAAD,EAAWD,QAAX,CARsC,CAAxC;AAWA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,eAIE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,IADH,aACGA,IADH,uBACGA,IAAI,CAAEmB,IAAN,CAAWC,MAAX,CAAkB,CAACjB,OAAD,EAAUkB,CAAV,KAAgB;AACjC,WAAQlB,OAAO,CAACmB,IAAR,CAAaV,KAAb,CAAmB,GAAnB,EAAwBE,MAAxB,KAAmC,CAAnC,IAAyCX,OAAO,CAACmB,IAAR,CAAaV,KAAb,CAAmB,GAAnB,EAAwBE,MAAxB,KAAmC,CAAnC,IAAwCX,OAAO,CAACmB,IAAR,CAAaV,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,MAA+B,kBAAxH;AACD,GAFA,EAEEW,GAFF,CAEM,CAACpB,OAAD,EAAUkB,CAAV,kBACL,0CACGlB,OAAO,CAACmB,IAAR,CAAaV,KAAb,CAAmB,GAAnB,EAAwBE,MAAxB,KAAmC,CAAnC,gBAAuC;AACtC,IAAA,GAAG,EAAEO,CADiC;AAEtC,IAAA,EAAE,EAAEA,CAAC,CAACG,QAAF,EAFkC;AAGtC,IAAA,OAAO,EAAE,MAAMhB,oBAAoB,CAACL,OAAO,CAACmB,IAAT,CAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIvC,oBAAC,aAAD;AAAe,IAAA,WAAW,EAAEnB,OAAO,CAACmB,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJuC,CAAvC,GAKGnB,OAAO,CAACmB,IAAR,CAAaV,KAAb,CAAmB,GAAnB,EAAwBE,MAAxB,KAAmC,CAAnC,gBAAuC;AACvC,IAAA,GAAG,EAAEO,CADkC;AAEvC,IAAA,EAAE,EAAEA,CAAC,CAACG,QAAF,EAFmC;AAGvC,IAAA,SAAS,EAAErB,OAAO,CAACmB,IAAR,CAAaV,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAH4B;AAIvC,IAAA,OAAO,EAAE,MAAMV,kBAAkB,CAACC,OAAO,CAACmB,IAAT,CAJM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMvC,oBAAC,eAAD;AACE,IAAA,aAAa,EAAEnB,OAAO,CAACmB,IADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANuC,CAAvC,gBASO,yCAfb,CAHD,CADH,CAJF,CADF;AA+BD,CA5DD;;AA8DA,eAAe1B,WAAf","sourcesContent":["import React, { useCallback } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\nimport ContestButton from '../ContestButton'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n  tree: Challenge []\n}\n\ninterface Challenge {\n  path: string;\n}\n\nconst ContestList: React.FC = () => {\n  const dispatch = useDispatch()\n  const dataAuth = useSelector((state: any) => state.data.auth)\n\n  const { data } = useFetch<Contest>('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"')\n  const handleSelectChange = useCallback(\n    (contest: string) => {\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: { name: `${contest}` }\n        }\n      }\n      dispatch({ type: 'CHALLENGE', data: newChallenge })\n    },\n    [dataAuth, dispatch]\n  )\n\n  const handleVisibleContest = useCallback(\n    (contest: string) => {\n      const challenges = document.getElementsByClassName(contest.split('/')[0])\n      for (let index = 0; index < challenges.length; index++) {\n        const element = challenges[index]\n        console.log(element.attributes)\n      }\n    },\n    [dataAuth, dispatch]\n  )\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Contests</span>\n      </Category>\n      <div id='listOfContests'>\n        {data?.tree.filter((contest, i) => {\n          return (contest.path.split('/').length === 1 || (contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt'))\n        }).map((contest, i) => (\n          <>\n            {contest.path.split('/').length === 1 ? <div\n              key={i}\n              id={i.toString()}\n              onClick={() => handleVisibleContest(contest.path)}\n            ><ContestButton contestName={contest.path}></ContestButton></div>\n              : contest.path.split('/').length === 2 ? <div\n                key={i}\n                id={i.toString()}\n                className={contest.path.split('/')[0]}\n                onClick={() => handleSelectChange(contest.path)}\n              >\n                <ChallengeButton\n                  challengeName={contest.path}\n                />\n              </div> : <></>\n            }\n          </>\n        ))}\n      </div>\n    </ContainerList>\n  )\n}\n\nexport default ContestList\n"]},"metadata":{},"sourceType":"module"}