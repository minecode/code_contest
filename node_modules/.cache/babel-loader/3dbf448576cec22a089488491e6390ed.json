{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx\";\nimport React from 'react';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector } from 'react-redux';\nimport { Container, Role, User } from './styles';\n\nconst UserRow = ({\n  userId,\n  score\n}) => {\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, userId), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const contestChallenge = useSelector(state => state.data);\n  const challengeName = contestChallenge.challenge.name;\n  const {\n    data: initialData\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: userDataFetch\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  console.log('HERE1');\n  console.log(data);\n  console.log('HERE2');\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, userDataFetch ? /*#__PURE__*/React.createElement(React.Fragment, null, challengeName ? /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 27\n    }\n  }, challengeName.split('/').join(' ').split('_').join(' ')) : /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 100\n    }\n  }, \"Global\"), data && data.length > 0 ? data.map(function (element, i) {\n    let user;\n    userDataFetch.forEach(element2 => {\n      element2.userId === element.userId ? user = element2 : user = user;\n    });\n    return /*#__PURE__*/React.createElement(\"p\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }\n    }, element.userId); // return <UserRow key={i} user={userDataFetch.includes(element.user)} score={element.score}/>\n  }) : initialData ? initialData.map(function (element, i) {\n    // return <UserRow key={i} user={userDataFetch.includes(element.user)} score={element.score}/>\n    return /*#__PURE__*/React.createElement(\"p\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }\n    }, element.userId);\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx"],"names":["React","useFetch","useSelector","Container","Role","User","UserRow","userId","score","UserList","contestChallenge","state","data","challengeName","challenge","name","initialData","userDataFetch","console","log","split","join","length","map","element","i","user","forEach","element2"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,IAA1B,QAA8C,UAA9C;;AAcA,MAAMC,OAAuB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AACrD,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASD,MAAT,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,KAAP,CAJF,CADF;AASD,CAVD;;AAYA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAMC,gBAAgB,GAAGR,WAAW,CAAES,KAAD,IAAgBA,KAAK,CAACC,IAAvB,CAApC;AACA,QAAMC,aAAa,GAAGH,gBAAgB,CAACI,SAAjB,CAA2BC,IAAjD;AAEA,QAAM;AAAEH,IAAAA,IAAI,EAAEI;AAAR,MAAwBf,QAAQ,CAAS,uCAAT,CAAtC;AACA,QAAM;AAAEW,IAAAA,IAAI,EAAEK;AAAR,MAA0BhB,QAAQ,CAAY,qCAAZ,CAAxC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWX,QAAQ,CAAU,yCAAwCY,aAAc,EAAhE,CAAzB;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIF,aAAa,gBAAG,0CACdJ,aAAa,gBAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,aAAa,CAACO,KAAd,CAAoB,GAApB,EAAyBC,IAAzB,CAA8B,GAA9B,EAAmCD,KAAnC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD,GAAnD,CAAP,CAAH,gBAA4E,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD3E,EAEdT,IAAI,IAAIA,IAAI,CAACU,MAAL,GAAc,CAAtB,GAA0BV,IAAI,CAACW,GAAL,CAAS,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACzD,QAAIC,IAAJ;AACAT,IAAAA,aAAa,CAACU,OAAd,CAAsBC,QAAQ,IAAI;AAChCA,MAAAA,QAAQ,CAACrB,MAAT,KAAoBiB,OAAO,CAACjB,MAA5B,GAAqCmB,IAAI,GAAGE,QAA5C,GAAuDF,IAAI,GAAGA,IAA9D;AACD,KAFD;AAIA,wBAAO;AAAG,MAAA,GAAG,EAAED,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,OAAO,CAACjB,MAApB,CAAP,CANyD,CAOzD;AACD,GAR2B,CAA1B,GASES,WAAW,GAAGA,WAAW,CAACO,GAAZ,CAAgB,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACpD;AACA,wBAAO;AAAG,MAAA,GAAG,EAAEA,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYD,OAAO,CAACjB,MAApB,CAAP;AACD,GAHe,CAAH,gBAIT,yCAfU,CAAH,gBAiBX,yCAlBN,CADF;AAsBD,CAlCD;;AAoCA,eAAeE,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector } from 'react-redux'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n  userId: string;\n  score: number;\n}\n\ninterface UserApi {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  imageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ userId, score }) => {\n  return (\n    <User>\n      {/* <Avatar src={user.imageUrl}/> */}\n\n      <strong>{userId}</strong>\n      <span>{score}</span>\n\n    </User>\n  )\n}\n\nconst UserList: React.FC = () => {\n  const contestChallenge = useSelector((state: any) => state.data)\n  const challengeName = contestChallenge.challenge.name\n\n  const { data: initialData } = useFetch<User[]>('http://localhost:4001/contests/global')\n  const { data: userDataFetch } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n  const { data } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n\n  console.log('HERE1')\n  console.log(data)\n  console.log('HERE2')\n\n  return (\n    <Container>\n      { userDataFetch ? <>\n        { challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role> }\n        { data && data.length > 0 ? data.map(function (element, i) {\n          let user\n          userDataFetch.forEach(element2 => {\n            element2.userId === element.userId ? user = element2 : user = user\n          })\n\n          return <p key={i}>{element.userId}</p>\n          // return <UserRow key={i} user={userDataFetch.includes(element.user)} score={element.score}/>\n        })\n          : initialData ? initialData.map(function (element, i) {\n            // return <UserRow key={i} user={userDataFetch.includes(element.user)} score={element.score}/>\n            return <p key={i}>{element.userId}</p>\n          })\n            : <></>\n        }</>\n        : <></> }\n    </Container>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}