{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n  console.log('ContestList', data);\n  const [contestsActive, setContestsActive] = useState([]);\n  const {\n    data: dataTree\n  } = useFetch('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n  const handleSelectChange = useCallback(contest => {\n    const newData = {\n      data: data\n    };\n    console.log('ContestList2', data);\n    newData.data.selectedChallenge = {\n      name: `${contest}`\n    };\n    dispatch({\n      type: 'CHALLENGE',\n      data: newData\n    });\n  }, [dispatch]);\n\n  const handleVisibleContest = contest => {\n    if (contestsActive.includes(contest)) {\n      setContestsActive(contestsActive.filter(item => item !== contest));\n      const newData = data;\n      newData.data.challenge = {\n        name: null\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newData\n      });\n    } else {\n      setContestsActive(contestsActive => [...contestsActive, contest]);\n      const newData = data;\n      newData.data.challenge = {\n        name: `${contest}/`\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newData\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, dataTree === null || dataTree === void 0 ? void 0 : dataTree.tree.filter((contest, i) => {\n    return contest.path.split('/').length === 1 || contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt';\n  }).map((contest, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }\n  }, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path.split('/')[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(ContestButton, {\n    contestName: contest.path,\n    size: dataTree.tree.filter(elem => {\n      return elem.path.includes(contest.path) && elem.path.split('/').length === 3;\n    }).length / 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  })) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split('/')[0],\n    onClick: () => handleSelectChange(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","useState","ContainerList","Category","ChallengeButton","ContestButton","useFetch","useSelector","useDispatch","ContestList","dispatch","data","state","console","log","contestsActive","setContestsActive","dataTree","handleSelectChange","contest","newData","selectedChallenge","name","type","handleVisibleContest","includes","filter","item","challenge","tree","i","path","split","length","map","toString","elem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,UAAxC;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAUA,MAAMC,WAAqB,GAAG,MAAM;AAClC,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMG,IAAI,GAAGJ,WAAW,CAAEK,KAAD,IAAgBA,KAAK,CAACD,IAAvB,CAAxB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,IAA3B;AAEA,QAAM,CAACI,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAW,EAAX,CAApD;AAEA,QAAM;AAAEU,IAAAA,IAAI,EAAEM;AAAR,MAAqBX,QAAQ,CAAU,sEAAV,CAAnC;AAEA,QAAMY,kBAAkB,GAAGlB,WAAW,CACnCmB,OAAD,IAAqB;AACnB,UAAMC,OAAO,GAAG;AAAET,MAAAA,IAAI,EAAEA;AAAR,KAAhB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,IAA5B;AAEAS,IAAAA,OAAO,CAACT,IAAR,CAAaU,iBAAb,GAAiC;AAAEC,MAAAA,IAAI,EAAG,GAAEH,OAAQ;AAAnB,KAAjC;AAEAT,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAE,WAAR;AAAqBZ,MAAAA,IAAI,EAAES;AAA3B,KAAD,CAAR;AACD,GARmC,EASpC,CAACV,QAAD,CAToC,CAAtC;;AAYA,QAAMc,oBAAoB,GAAIL,OAAD,IAAkB;AAC7C,QAAIJ,cAAc,CAACU,QAAf,CAAwBN,OAAxB,CAAJ,EAAsC;AACpCH,MAAAA,iBAAiB,CAACD,cAAc,CAACW,MAAf,CAAuBC,IAAD,IAAUA,IAAI,KAAKR,OAAzC,CAAD,CAAjB;AACA,YAAMC,OAAO,GAAGT,IAAhB;AACAS,MAAAA,OAAO,CAACT,IAAR,CAAaiB,SAAb,GAAyB;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAzB;AAEAZ,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAE,WAAR;AAAqBZ,QAAAA,IAAI,EAAES;AAA3B,OAAD,CAAR;AACD,KAND,MAMO;AACLJ,MAAAA,iBAAiB,CAAED,cAAD,IAAoB,CAAC,GAAGA,cAAJ,EAAoBI,OAApB,CAArB,CAAjB;AACA,YAAMC,OAAO,GAAGT,IAAhB;AACAS,MAAAA,OAAO,CAACT,IAAR,CAAaiB,SAAb,GAAyB;AAAEN,QAAAA,IAAI,EAAG,GAAEH,OAAQ;AAAnB,OAAzB;AAEAT,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAE,WAAR;AAAqBZ,QAAAA,IAAI,EAAES;AAA3B,OAAD,CAAR;AACD;AACF,GAdD;;AAgBA,sBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,eAIE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,aACGA,QADH,uBACGA,QAAQ,CAAEY,IAAV,CACQH,MADR,CACe,CAACP,OAAD,EAAUW,CAAV,KAAgB;AACtB,WACEX,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,KAAmC,CAAnC,IACKd,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,KAAmC,CAAnC,IAAwCd,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,MAA+B,kBAF9E;AAID,GANR,EAOQE,GAPR,CAOY,CAACf,OAAD,EAAUW,CAAV,kBACH;AAAK,IAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,KAAmC,CAAnC,gBACC;AAAK,IAAA,GAAG,EAAEH,CAAV;AAAa,IAAA,EAAE,EAAEA,CAAC,CAACK,QAAF,EAAjB;AAA+B,IAAA,OAAO,EAAE,MAAMX,oBAAoB,CAACL,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAD,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,WAAW,EAAEb,OAAO,CAACY,IAApC;AAA0C,IAAA,IAAI,EAAEd,QAAQ,CAACY,IAAT,CAAcH,MAAd,CAAsBU,IAAD,IAAU;AAC7E,aAAOA,IAAI,CAACL,IAAL,CAAUN,QAAV,CAAmBN,OAAO,CAACY,IAA3B,KAAoCK,IAAI,CAACL,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqBC,MAArB,KAAgC,CAA3E;AACD,KAF+C,EAE7CA,MAF6C,GAEpC,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,GAMGd,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,KAAmC,CAAnC,IAAwClB,cAAc,CAACU,QAAf,CAAwBN,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAxB,CAAxC,gBACF;AACE,IAAA,GAAG,EAAEF,CADP;AAEE,IAAA,EAAE,EAAEA,CAAC,CAACK,QAAF,EAFN;AAGE,IAAA,SAAS,EAAEhB,OAAO,CAACY,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAHb;AAIE,IAAA,OAAO,EAAE,MAAMd,kBAAkB,CAACC,OAAO,CAACY,IAAT,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,eAAD;AAAiB,IAAA,aAAa,EAAEZ,OAAO,CAACY,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADE,gBASF,yCAhBJ,CART,CADH,CAJF,CADF;AAqCD,CA1ED;;AA4EA,eAAetB,WAAf","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\nimport ContestButton from '../ContestButton'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n    tree: Challenge[];\n}\n\ninterface Challenge {\n    path: string;\n}\n\nconst ContestList: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = useSelector((state: any) => state.data)\n  console.log('ContestList', data)\n\n  const [contestsActive, setContestsActive] = useState<string[]>([])\n\n  const { data: dataTree } = useFetch<Contest>('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"')\n\n  const handleSelectChange = useCallback(\n    (contest: string) => {\n      const newData = { data: data }\n      console.log('ContestList2', data)\n\n      newData.data.selectedChallenge = { name: `${contest}` }\n\n      dispatch({ type: 'CHALLENGE', data: newData })\n    },\n    [dispatch]\n  )\n\n  const handleVisibleContest = (contest: any) => {\n    if (contestsActive.includes(contest)) {\n      setContestsActive(contestsActive.filter((item) => item !== contest))\n      const newData = data\n      newData.data.challenge = { name: null }\n\n      dispatch({ type: 'CHALLENGE', data: newData })\n    } else {\n      setContestsActive((contestsActive) => [...contestsActive, contest])\n      const newData = data\n      newData.data.challenge = { name: `${contest}/` }\n\n      dispatch({ type: 'CHALLENGE', data: newData })\n    }\n  }\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Contests</span>\n      </Category>\n      <div id='listOfContests'>\n        {dataTree?.tree\n                .filter((contest, i) => {\n                  return (\n                    contest.path.split('/').length === 1 ||\n                        (contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt')\n                  )\n                })\n                .map((contest, i) => (\n                  <div key={i}>\n                    {contest.path.split('/').length === 1 ? (\n                      <div key={i} id={i.toString()} onClick={() => handleVisibleContest(contest.path.split('/')[0])}>\n                        <ContestButton contestName={contest.path} size={dataTree.tree.filter((elem) => {\n                          return elem.path.includes(contest.path) && elem.path.split('/').length === 3\n                        }).length / 2}></ContestButton>\n                      </div>\n                    ) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? (\n                      <div\n                        key={i}\n                        id={i.toString()}\n                        className={contest.path.split('/')[0]}\n                        onClick={() => handleSelectChange(contest.path)}>\n                        <ChallengeButton challengeName={contest.path} />\n                      </div>\n                    ) : (\n                      <></>\n                    )}\n                  </div>\n                ))}\n      </div>\n    </ContainerList>\n  )\n}\n\nexport default ContestList\n"]},"metadata":{},"sourceType":"module"}