{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { titleCase } from '../Utils';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const dataAuth = useSelector(state => state.data.auth);\n  const {\n    data\n  } = useFetch('/git/trees/ba3a18d7f49f2296bfd47ee3db7682f8ed7cb8f1?recursive=\"true\"');\n  data === null || data === void 0 ? void 0 : data.tree.forEach(element => {});\n  const handleSelectChange = useCallback(id => {\n    var _document$getElementB;\n\n    const challenges = (_document$getElementB = document.getElementById('listOfContests')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.childNodes;\n    challenges === null || challenges === void 0 ? void 0 : challenges.forEach(challenge => {\n      if (challenge.isEqualNode(document.getElementById(id.toString()))) {\n        data === null || data === void 0 ? void 0 : data.tree.forEach(selectedChallenge => {\n          var _challenge$firstChild;\n\n          console.log('selectedchallenge', selectedChallenge.path);\n          const selectedChallengeName = selectedChallenge.path.split('_').join(' ');\n\n          if (titleCase(selectedChallengeName) === ((_challenge$firstChild = challenge.firstChild) === null || _challenge$firstChild === void 0 ? void 0 : _challenge$firstChild.textContent)) {\n            const newChallenge = {\n              data: {\n                auth: dataAuth,\n                challenge: {\n                  name: selectedChallengeName\n                }\n              }\n            };\n            dispatch({\n              type: 'CHALLENGE',\n              data: newChallenge\n            });\n          }\n        });\n      }\n    });\n  }, [data, dataAuth, dispatch]);\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.tree.map((contest, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleSelectChange(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 53\n    }\n  }, titleCase(contest.path)) : contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt' ? /*#__PURE__*/React.createElement(ChallengeButton, {\n    contestName: contest.path.split('/')[1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 109\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","ContainerList","Category","ChallengeButton","useFetch","titleCase","useSelector","useDispatch","ContestList","dispatch","dataAuth","state","data","auth","tree","forEach","element","handleSelectChange","id","challenges","document","getElementById","childNodes","challenge","isEqualNode","toString","selectedChallenge","console","log","path","selectedChallengeName","split","join","firstChild","textContent","newChallenge","name","type","map","contest","i","length"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\n\nimport { useFetch } from 'src/hooks/useFetch'\nimport { titleCase } from '../Utils'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n  tree: Challenge []\n}\n\ninterface Challenge {\n  path: string;\n}\n\nconst ContestList: React.FC = () => {\n  const dispatch = useDispatch()\n  const dataAuth = useSelector((state: any) => state.data.auth)\n\n  const { data } = useFetch<Contest>('/git/trees/ba3a18d7f49f2296bfd47ee3db7682f8ed7cb8f1?recursive=\"true\"')\n  data?.tree.forEach(element => {\n  })\n  const handleSelectChange = useCallback(\n    (id: number) => {\n      const challenges = document.getElementById('listOfContests')?.childNodes\n        challenges?.forEach((challenge) => {\n          if (\n            challenge.isEqualNode(\n              document.getElementById(id.toString())\n            )\n          ) {\n                data?.tree.forEach((selectedChallenge) => {\n                  console.log('selectedchallenge', selectedChallenge.path)\n                  const selectedChallengeName = selectedChallenge.path.split('_').join(' ')\n                  if (\n                    titleCase(selectedChallengeName) ===\n                      challenge.firstChild?.textContent\n                  ) {\n                    const newChallenge = {\n                      data: {\n                        auth: dataAuth,\n                        challenge: { name: selectedChallengeName }\n                      }\n                    }\n                    dispatch({ type: 'CHALLENGE', data: newChallenge })\n                  }\n                })\n          }\n        })\n    },\n    [data, dataAuth, dispatch]\n  )\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Contests</span>\n      </Category>\n      <div id='listOfContests'>\n        {data?.tree.map((contest, i) => (\n          <div\n            key={i}\n            id={i.toString()}\n            onClick={() => handleSelectChange(i)}\n          >\n            {contest.path.split('/').length === 1 ? <p>{titleCase(contest.path)}</p>\n              : contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt' ? <ChallengeButton\n                contestName={contest.path.split('/')[1]}\n              /> : <></>\n            }\n          </div>\n        ))}\n      </div>\n    </ContainerList>\n  )\n}\n\nexport default ContestList\n"]},"metadata":{},"sourceType":"module"}