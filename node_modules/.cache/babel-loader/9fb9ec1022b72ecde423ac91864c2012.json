{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx\";\nimport React from 'react';\nimport { Container, Grid, LoginInfo, Message } from './styles';\nimport { Col, Row } from 'react-bootstrap';\nimport ChallengeInfo from '../ChallengeInfo';\nimport ContestList from '../ContestList';\nimport Drop from '../Drop';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login';\nimport { BtnGoogle } from '../Authentication/styles';\n\nconst Challenge = () => {\n  const data = useSelector(state => state.data);\n  const authentication = data.auth.authenticated;\n  const dataSelectedChallenge = data.selectedChallenge;\n  console.log('Challenge', dataSelectedChallenge);\n  const challengeName = dataSelectedChallenge.name;\n  const dispatch = useDispatch();\n\n  const login = response => {\n    const newData = data;\n    newData.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl\n      },\n      token: response.tokenId\n    };\n    dispatch({\n      type: 'LOGIN',\n      data: newData\n    });\n  };\n\n  const badResponseGoogle = response => {\n    console.log(response);\n    dispatch({\n      type: 'BAD_RESPONSE',\n      data: null\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ContestList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), challengeName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChallengeInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), authentication ? /*#__PURE__*/React.createElement(Drop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(LoginInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"You need to \", /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: \"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\",\n    buttonText: \"Login\",\n    onSuccess: login,\n    onFailure: badResponseGoogle,\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true,\n    render: renderProps => /*#__PURE__*/React.createElement(BtnGoogle, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, \"Sign In w/ Google\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 44\n    }\n  }), \" to send your solution!\"))))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n};\n\nexport default Challenge;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx"],"names":["React","Container","Grid","LoginInfo","Message","Col","Row","ChallengeInfo","ContestList","Drop","useSelector","useDispatch","GoogleLogin","BtnGoogle","Challenge","data","state","authentication","auth","authenticated","dataSelectedChallenge","selectedChallenge","console","log","challengeName","name","dispatch","login","response","newData","user","id","googleId","profileObj","givenName","surname","familyName","image","imageUrl","token","tokenId","type","badResponseGoogle","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Container, Grid, LoginInfo, Message } from './styles'\nimport { Col, Row } from 'react-bootstrap'\n\nimport ChallengeInfo from '../ChallengeInfo'\nimport ContestList from '../ContestList'\n\nimport Drop from '../Drop'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { GoogleLogin } from 'react-google-login'\nimport { BtnGoogle } from '../Authentication/styles'\n\nconst Challenge: React.FC = () => {\n  const data = useSelector((state: any) => state.data)\n  const authentication = data.auth.authenticated\n  const dataSelectedChallenge = data.selectedChallenge\n  console.log('Challenge', dataSelectedChallenge)\n  const challengeName = dataSelectedChallenge.name\n\n  const dispatch = useDispatch()\n\n  const login = (response: any) => {\n    const newData = data\n    newData.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl\n      },\n      token: response.tokenId\n    }\n\n    dispatch({ type: 'LOGIN', data: newData })\n  }\n\n  const badResponseGoogle = (response: any) => {\n    console.log(response)\n    dispatch({ type: 'BAD_RESPONSE', data: null })\n  }\n\n  return (\n    <Container>\n      <Grid>\n        <ContestList />\n        {challengeName ? (\n          <>\n            <ChallengeInfo />\n            {authentication ? (\n              <Drop />\n            ) : (\n              <Message>\n                <Row>\n                  <Col xs={12} className=\"text-center\">\n                    <LoginInfo>You need to <GoogleLogin\n                      clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n                      buttonText='Login'\n                      onSuccess={login}\n                      onFailure={badResponseGoogle}\n                      cookiePolicy={'single_host_origin'}\n                      isSignedIn={true}\n                      render={renderProps => (\n                        <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>Sign In w/ Google</BtnGoogle>\n                      )}\n                    /> to send your solution!</LoginInfo>\n                  </Col>\n                </Row>\n              </Message>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </Grid>\n    </Container>\n  )\n}\n\nexport default Challenge\n"]},"metadata":{},"sourceType":"module"}