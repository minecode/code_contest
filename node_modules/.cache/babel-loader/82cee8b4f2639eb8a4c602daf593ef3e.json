{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/Challenge/index.tsx\";\nimport React from 'react';\nimport { Container, Grid, LoginInfo, Message } from './styles';\nimport { Col, Row } from 'react-bootstrap';\nimport ChallengeInfo from '../ChallengeInfo';\nimport ContestList from '../ContestList';\nimport Drop from '../Drop';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login';\nimport { BtnGoogle } from '../Authentication/styles';\n\nconst Challenge = () => {\n  const data = useSelector(state => state.data);\n  const authentication = useSelector(state => state.data.auth.authenticated);\n  const challengeName = useSelector(state => state.data.selectedChallenge.name);\n  const dispatch = useDispatch();\n\n  const login = response => {\n    const newData = {\n      data: data\n    };\n    newData.data.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl\n      },\n      token: response.tokenId\n    };\n    dispatch({\n      type: 'LOGIN',\n      data: newData\n    });\n  };\n\n  const badResponseGoogle = response => {\n    console.log(response);\n    dispatch({\n      type: 'BAD_RESPONSE',\n      data: null\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ContestList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), challengeName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChallengeInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 25\n    }\n  }), authentication ? /*#__PURE__*/React.createElement(Drop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(LoginInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 41\n    }\n  }, \"You need to \", /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: \"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\",\n    buttonText: \"Login\",\n    onSuccess: login,\n    onFailure: badResponseGoogle,\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true,\n    render: renderProps => /*#__PURE__*/React.createElement(BtnGoogle, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 49\n      }\n    }, \"Sign In w/ Google\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 64\n    }\n  }), \" to send your solution!\"))))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n};\n\nexport default Challenge;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/Challenge/index.tsx"],"names":["React","Container","Grid","LoginInfo","Message","Col","Row","ChallengeInfo","ContestList","Drop","useSelector","useDispatch","GoogleLogin","BtnGoogle","Challenge","data","state","authentication","auth","authenticated","challengeName","selectedChallenge","name","dispatch","login","response","newData","user","id","googleId","profileObj","givenName","surname","familyName","image","imageUrl","token","tokenId","type","badResponseGoogle","console","log","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Container, Grid, LoginInfo, Message } from './styles'\nimport { Col, Row } from 'react-bootstrap'\n\nimport ChallengeInfo from '../ChallengeInfo'\nimport ContestList from '../ContestList'\n\nimport Drop from '../Drop'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { GoogleLogin } from 'react-google-login'\nimport { BtnGoogle } from '../Authentication/styles'\n\nconst Challenge: React.FC = () => {\n    const data = useSelector((state: any) => state.data)\n    const authentication = useSelector((state: any) => state.data.auth.authenticated)\n    const challengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n\n    const dispatch = useDispatch()\n\n    const login = (response: any) => {\n        const newData = { data: data }\n\n        newData.data.auth = {\n            authenticated: true,\n            user: {\n                id: response.googleId,\n                name: response.profileObj.givenName,\n                surname: response.profileObj.familyName,\n                image: response.profileObj.imageUrl\n            },\n            token: response.tokenId\n        }\n\n        dispatch({ type: 'LOGIN', data: newData })\n    }\n\n    const badResponseGoogle = (response: any) => {\n        console.log(response)\n        dispatch({ type: 'BAD_RESPONSE', data: null })\n    }\n\n    return (\n        <Container>\n            <Grid>\n                <ContestList />\n                {challengeName ? (\n                    <>\n                        <ChallengeInfo />\n                        {authentication ? (\n                            <Drop />\n                        ) : (\n                            <Message>\n                                <Row>\n                                    <Col xs={12} className=\"text-center\">\n                                        <LoginInfo>You need to <GoogleLogin\n                                            clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n                                            buttonText='Login'\n                                            onSuccess={login}\n                                            onFailure={badResponseGoogle}\n                                            cookiePolicy={'single_host_origin'}\n                                            isSignedIn={true}\n                                            render={renderProps => (\n                                                <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>Sign In w/ Google</BtnGoogle>\n                                            )}\n                                        /> to send your solution!</LoginInfo>\n                                    </Col>\n                                </Row>\n                            </Message>\n                        )}\n                    </>\n                ) : (\n                    <></>\n                )}\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Challenge\n"]},"metadata":{},"sourceType":"module"}