{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx\";\nimport React from 'react';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector } from 'react-redux';\nimport { Container, Role, User } from './styles';\n\nconst UserRow = ({\n  user,\n  score\n}) => {\n  console.log(user);\n  console.log(score);\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, user.firstName), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const contestChallenge = useSelector(state => state.data);\n  const challengeName = contestChallenge.challenge.name;\n  const {\n    data: initialData\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: userDataFetch\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, userDataFetch ? /*#__PURE__*/React.createElement(React.Fragment, null, challengeName ? /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 27\n    }\n  }, challengeName.split('/').join(' ').split('_').join(' ')) : /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 100\n    }\n  }, \"Global\"), data && data.length > 0 ? data.map(function (element, i) {\n    let getUser;\n    userDataFetch.forEach(element2 => {\n      if (element2.userId === element.userId) {\n        getUser = element2;\n        console.log(getUser);\n        return /*#__PURE__*/React.createElement(UserRow, {\n          key: i,\n          user: getUser,\n          score: element.score,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 22\n          }\n        });\n      }\n    });\n  }) : initialData ? initialData.map(function (element, i) {\n    let getUser;\n    userDataFetch.forEach(element2 => {\n      if (element2.userId === element.userId) {\n        getUser = element2;\n        console.log(getUser);\n        return /*#__PURE__*/React.createElement(UserRow, {\n          key: i,\n          user: getUser,\n          score: element.score,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 24\n          }\n        });\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx"],"names":["React","useFetch","useSelector","Container","Role","User","UserRow","user","score","console","log","firstName","UserList","contestChallenge","state","data","challengeName","challenge","name","initialData","userDataFetch","split","join","length","map","element","i","getUser","forEach","element2","userId"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector } from 'react-redux'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n  userId?: string;\n  user: UserApi\n  score: number;\n}\n\ninterface UserApi {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  imageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ user, score }) => {\n  console.log(user)\n  console.log(score)\n  return (\n    <User>\n      {/* <Avatar src={user.imageUrl}/> */}\n\n      <strong>{user.firstName}</strong>\n      <span>{score}</span>\n\n    </User>\n  )\n}\n\nconst UserList: React.FC = () => {\n  const contestChallenge = useSelector((state: any) => state.data)\n  const challengeName = contestChallenge.challenge.name\n\n  const { data: initialData } = useFetch<User[]>('http://localhost:4001/contests/global')\n  const { data: userDataFetch } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n  const { data } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n\n  return (\n    <Container>\n      { userDataFetch ? <>\n        { challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role> }\n        { data && data.length > 0 ? data.map(function (element, i) {\n          let getUser: UserApi\n          userDataFetch.forEach(element2 => {\n            if (element2.userId === element.userId) {\n              getUser = element2\n              console.log(getUser)\n              return <UserRow key={i} user={getUser} score={element.score}/>\n            }\n          })\n        })\n          : initialData ? initialData.map(function (element, i) {\n            let getUser: UserApi\n            userDataFetch.forEach(element2 => {\n              if (element2.userId === element.userId) {\n                getUser = element2\n                console.log(getUser)\n\n                return <UserRow key={i} user={getUser} score={element.score}/>\n              }\n            })\n          })\n            : <></>\n        }</>\n        : <></> }\n    </Container>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}