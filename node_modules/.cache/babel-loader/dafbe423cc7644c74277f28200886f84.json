{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/Navbar/index.tsx\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useFetch } from 'src/hooks/useFetch';\nimport Authentication from '../Authentication';\nimport { Container, Avatar, UserInfo, Auth } from './styles';\n\nconst Navbar = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n  const dataAuth = useSelector(state => state.data.auth);\n  const userId = useSelector(state => state.data.auth.user.id);\n  const challengeName = useSelector(state => state.data.selectedChallenge.name);\n  const {\n    data: globalScore\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: listOfUsers\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data: challengeScore\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  const {\n    data: userScore\n  } = useFetch(`http://localhost:4001/contests/${userId}/${challengeName}`);\n  const {\n    data: challengeIndex\n  } = useFetch(`/contents/contests/${challengeName === null || challengeName === void 0 ? void 0 : challengeName.split(' ').join('_')}/index.md`);\n  const {\n    data: challengeList\n  } = useFetch(`http://localhost:4001/contests/list/${userId}`);\n  useEffect(() => {\n    const newData = {\n      data: data\n    };\n    newData.data.globalScore = globalScore || null;\n    newData.data.listOfUsers = listOfUsers || null;\n    newData.data.challengeScore = challengeScore || null;\n    newData.data.userScore = userScore || null;\n    newData.data.challengeIndex = challengeIndex || null;\n    newData.data.challengeList = challengeList || null;\n    dispatch({\n      type: 'CHALLENGE',\n      data: newData\n    });\n  }, [globalScore, listOfUsers, challengeScore, userScore, challengeIndex, challengeList, dispatch, data]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, dataAuth.authenticated ? /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Welcome, \", dataAuth.user.name, \"!\"), /*#__PURE__*/React.createElement(Avatar, {\n    src: dataAuth.user.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Auth, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Authentication, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Navbar;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/Navbar/index.tsx"],"names":["React","useEffect","useDispatch","useSelector","useFetch","Authentication","Container","Avatar","UserInfo","Auth","Navbar","dispatch","data","state","dataAuth","auth","userId","user","id","challengeName","selectedChallenge","name","globalScore","listOfUsers","challengeScore","userScore","challengeIndex","split","join","challengeList","newData","type","authenticated","image"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useFetch } from 'src/hooks/useFetch'\n\nimport Authentication from '../Authentication'\nimport { Container, Avatar, UserInfo, Auth } from './styles'\n\ninterface User {\n    userId?: string;\n    user: UserApi;\n    score: number;\n}\n\ninterface UserApi {\n    userId: string;\n    firstName: string;\n    lastName: string;\n    imageUrl: string;\n}\n\ninterface Challenge {\n  name: string;\n  content: string;\n}\n\nconst Navbar: React.FC = () => {\n    const dispatch = useDispatch()\n    const data = useSelector((state: any) => state.data)\n    const dataAuth = useSelector((state: any) => state.data.auth)\n    const userId = useSelector((state: any) => state.data.auth.user.id)\n    const challengeName = useSelector((state: any) => state.data.selectedChallenge.name)\n\n    const { data: globalScore } = useFetch<User[]>('http://localhost:4001/contests/global')\n    const { data: listOfUsers } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n    const { data: challengeScore } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n    const { data: userScore } = useFetch<User[]>(`http://localhost:4001/contests/${userId}/${challengeName}`)\n    const { data: challengeIndex } = useFetch<Challenge>(`/contents/contests/${challengeName?.split(' ').join('_')}/index.md`)\n    const { data: challengeList } = useFetch<Challenge>(`http://localhost:4001/contests/list/${userId}`)\n    useEffect(() => {\n        const newData = { data: data }\n\n        newData.data.globalScore = globalScore || null\n        newData.data.listOfUsers = listOfUsers || null\n        newData.data.challengeScore = challengeScore || null\n        newData.data.userScore = userScore || null\n        newData.data.challengeIndex = challengeIndex || null\n        newData.data.challengeList = challengeList || null\n\n        dispatch({ type: 'CHALLENGE', data: newData })\n    }, [globalScore, listOfUsers, challengeScore, userScore, challengeIndex, challengeList, dispatch, data])\n\n    return (\n        <Container>\n            {dataAuth.authenticated ? (\n                <UserInfo>\n                    <span>Welcome, {dataAuth.user.name}!</span>\n                    <Avatar src={dataAuth.user.image} />\n                </UserInfo>\n            ) : (\n                <></>\n            )}\n            <Auth>\n                <Authentication />\n            </Auth>\n        </Container>\n    )\n}\n\nexport default Navbar\n"]},"metadata":{},"sourceType":"module"}