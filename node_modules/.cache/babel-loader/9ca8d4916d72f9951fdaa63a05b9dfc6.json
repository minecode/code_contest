{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n  const [contestsActive, setContestsActive] = useState('');\n  const {\n    data: dataTree\n  } = useFetch('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n  const handleSelectChange = useCallback(contest => {\n    const newData = {\n      data: data\n    };\n    newData.data.selectedChallenge = {\n      name: `${contest}`\n    };\n    dispatch({\n      type: 'CHALLENGE',\n      data: newData\n    });\n  }, [dispatch, data]);\n\n  const handleVisibleContest = contest => {\n    if (contestsActive === contest) {\n      setContestsActive('');\n      const newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: null\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newData\n      });\n    } else {\n      setContestsActive(contest);\n      const newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: `${contest}/`\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newData\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }\n  }, dataTree === null || dataTree === void 0 ? void 0 : dataTree.tree.filter((contest, i) => {\n    return contest.path.split('/').length === 1 || contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt';\n  }).map((contest, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 18\n    }\n  }, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path.split('/')[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(ContestButton, {\n    contestName: contest.path,\n    size: dataTree.tree.filter(elem => {\n      return elem.path.includes(contest.path) && elem.path.split('/').length === 3;\n    }).length / 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  })) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split('/')[0],\n    onClick: () => handleSelectChange(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","useState","ContainerList","Category","ChallengeButton","ContestButton","useFetch","useSelector","useDispatch","ContestList","dispatch","data","state","contestsActive","setContestsActive","dataTree","handleSelectChange","contest","newData","selectedChallenge","name","type","handleVisibleContest","tree","filter","i","path","split","length","map","toString","elem","includes"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\nimport ContestButton from '../ContestButton'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n    tree: Challenge[];\n}\n\ninterface Challenge {\n    path: string;\n}\n\nconst ContestList: React.FC = () => {\n\tconst dispatch = useDispatch()\n\tconst data = useSelector((state: any) => state.data)\n\n\tconst [contestsActive, setContestsActive] = useState<string>('')\n\n\tconst { data: dataTree } = useFetch<Contest>('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"')\n\n\tconst handleSelectChange = useCallback(\n\t\t(contest: string) => {\n\t\t\tconst newData = { data: data }\n\n\t\t\tnewData.data.selectedChallenge = { name: `${contest}` }\n\n\t\t\tdispatch({ type: 'CHALLENGE', data: newData })\n\t\t},\n\t\t[dispatch, data]\n\t)\n\n\tconst handleVisibleContest = (contest: any) => {\n\t\tif (contestsActive === contest) {\n\t\t\tsetContestsActive('')\n\t\t\tconst newData = { data: data }\n\t\t\tnewData.data.selectedChallenge = { name: null }\n\n\t\t\tdispatch({ type: 'CHALLENGE', data: newData })\n\t\t} else {\n\t\t\tsetContestsActive(contest)\n\t\t\tconst newData = { data: data }\n\t\t\tnewData.data.selectedChallenge = { name: `${contest}/` }\n\n\t\t\tdispatch({ type: 'CHALLENGE', data: newData })\n\t\t}\n\t}\n\n\treturn (\n\t\t<ContainerList>\n\t\t\t<Category>\n\t\t\t\t<span>Contests</span>\n\t\t\t</Category>\n\t\t\t<div id='listOfContests'>\n\t\t\t\t{dataTree?.tree\n                .filter((contest, i) => {\n                \treturn (\n                \t\tcontest.path.split('/').length === 1 ||\n                        (contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt')\n                \t)\n                })\n                .map((contest, i) => (\n                \t<div key={i}>\n                \t\t{contest.path.split('/').length === 1 ? (\n                \t\t\t<div key={i} id={i.toString()} onClick={() => handleVisibleContest(contest.path.split('/')[0])}>\n                \t\t\t\t<ContestButton contestName={contest.path} size={dataTree.tree.filter((elem) => {\n                \t\t\t\t\treturn elem.path.includes(contest.path) && elem.path.split('/').length === 3\n                \t\t\t\t}).length / 2}></ContestButton>\n                \t\t\t</div>\n                \t\t) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? (\n                \t\t\t<div\n                \t\t\t\tkey={i}\n                \t\t\t\tid={i.toString()}\n                \t\t\t\tclassName={contest.path.split('/')[0]}\n                \t\t\t\tonClick={() => handleSelectChange(contest.path)}>\n                \t\t\t\t<ChallengeButton challengeName={contest.path} />\n                \t\t\t</div>\n                \t\t) : (\n                \t\t\t<></>\n                \t\t)}\n                \t</div>\n                ))}\n\t\t\t</div>\n\t\t</ContainerList>\n\t)\n}\n\nexport default ContestList\n"]},"metadata":{},"sourceType":"module"}