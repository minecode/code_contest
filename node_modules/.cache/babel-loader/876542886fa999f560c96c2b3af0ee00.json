{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx\";\nimport React from 'react';\nimport { Container, Grid, LoginInfo, Message } from './styles';\nimport { Col, Row } from 'react-bootstrap';\nimport ChallengeInfo from '../ChallengeInfo';\nimport ContestList from '../ContestList';\nimport Drop from '../Drop';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login';\nimport { BtnGoogle } from '../Authentication/styles';\n\nconst Challenge = () => {\n  const data = useSelector(state => state.data);\n  const authentication = data.auth.authenticated;\n  const dataSelectedChallenge = data.selectedChallenge;\n  const challengeName = dataSelectedChallenge.name;\n  const dataGlobalScore = data.globalScore;\n  const dataListOfUsers = data.listOfUsers;\n  const dataChallengeScore = data.challengeScore;\n  const dataUserScore = data.userScore;\n  const dataChallengeIndex = data.challengeIndex;\n  console.log('Challenge', dataSelectedChallenge);\n  const dispatch = useDispatch();\n\n  const login = response => {\n    const newAuth = {\n      data: {\n        auth: {\n          authenticated: true,\n          user: {\n            id: response.googleId,\n            name: response.profileObj.givenName,\n            surname: response.profileObj.familyName,\n            image: response.profileObj.imageUrl\n          },\n          token: response.tokenId\n        },\n        selectedChallenge: dataSelectedChallenge,\n        globalScore: dataGlobalScore,\n        listOfUsers: dataListOfUsers,\n        challengeScore: dataChallengeScore,\n        userScore: dataUserScore,\n        challengeIndex: dataChallengeIndex\n      }\n    };\n    console.log('Challenge', newAuth.data);\n    dispatch({\n      type: 'LOGIN',\n      data: newAuth\n    });\n  };\n\n  const badResponseGoogle = response => {\n    console.log(response);\n    dispatch({\n      type: 'BAD_RESPONSE',\n      data: null\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ContestList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), challengeName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChallengeInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), authentication ? /*#__PURE__*/React.createElement(Drop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(LoginInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"You need to \", /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: \"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\",\n    buttonText: \"Login\",\n    onSuccess: login,\n    onFailure: badResponseGoogle,\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true,\n    render: renderProps => /*#__PURE__*/React.createElement(BtnGoogle, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }\n    }, \"Sign In w/ Google\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 44\n    }\n  }), \" to send your solution!\"))))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n};\n\nexport default Challenge;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx"],"names":["React","Container","Grid","LoginInfo","Message","Col","Row","ChallengeInfo","ContestList","Drop","useSelector","useDispatch","GoogleLogin","BtnGoogle","Challenge","data","state","authentication","auth","authenticated","dataSelectedChallenge","selectedChallenge","challengeName","name","dataGlobalScore","globalScore","dataListOfUsers","listOfUsers","dataChallengeScore","challengeScore","dataUserScore","userScore","dataChallengeIndex","challengeIndex","console","log","dispatch","login","response","newAuth","user","id","googleId","profileObj","givenName","surname","familyName","image","imageUrl","token","tokenId","type","badResponseGoogle","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Container, Grid, LoginInfo, Message } from './styles'\nimport { Col, Row } from 'react-bootstrap'\n\nimport ChallengeInfo from '../ChallengeInfo'\nimport ContestList from '../ContestList'\n\nimport Drop from '../Drop'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { GoogleLogin } from 'react-google-login'\nimport { BtnGoogle } from '../Authentication/styles'\n\nconst Challenge: React.FC = () => {\n  const data = useSelector((state: any) => state.data)\n  const authentication = data.auth.authenticated\n  const dataSelectedChallenge = data.selectedChallenge\n  const challengeName = dataSelectedChallenge.name\n  const dataGlobalScore = data.globalScore\n  const dataListOfUsers = data.listOfUsers\n  const dataChallengeScore = data.challengeScore\n  const dataUserScore = data.userScore\n  const dataChallengeIndex = data.challengeIndex\n  console.log('Challenge', dataSelectedChallenge)\n\n  const dispatch = useDispatch()\n\n  const login = (response: any) => {\n    const newAuth = {\n      data: {\n        auth: {\n          authenticated: true,\n          user: {\n            id: response.googleId,\n            name: response.profileObj.givenName,\n            surname: response.profileObj.familyName,\n            image: response.profileObj.imageUrl\n          },\n          token: response.tokenId\n        },\n        selectedChallenge: dataSelectedChallenge,\n        globalScore: dataGlobalScore,\n        listOfUsers: dataListOfUsers,\n        challengeScore: dataChallengeScore,\n        userScore: dataUserScore,\n        challengeIndex: dataChallengeIndex\n      }\n    }\n    console.log('Challenge', newAuth.data)\n\n    dispatch({ type: 'LOGIN', data: newAuth })\n  }\n\n  const badResponseGoogle = (response: any) => {\n    console.log(response)\n    dispatch({ type: 'BAD_RESPONSE', data: null })\n  }\n\n  return (\n    <Container>\n      <Grid>\n        <ContestList />\n        {challengeName ? (\n          <>\n            <ChallengeInfo />\n            {authentication ? (\n              <Drop />\n            ) : (\n              <Message>\n                <Row>\n                  <Col xs={12} className=\"text-center\">\n                    <LoginInfo>You need to <GoogleLogin\n                      clientId='156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com'\n                      buttonText='Login'\n                      onSuccess={login}\n                      onFailure={badResponseGoogle}\n                      cookiePolicy={'single_host_origin'}\n                      isSignedIn={true}\n                      render={renderProps => (\n                        <BtnGoogle onClick={renderProps.onClick} disabled={renderProps.disabled}>Sign In w/ Google</BtnGoogle>\n                      )}\n                    /> to send your solution!</LoginInfo>\n                  </Col>\n                </Row>\n              </Message>\n            )}\n          </>\n        ) : (\n          <></>\n        )}\n      </Grid>\n    </Container>\n  )\n}\n\nexport default Challenge\n"]},"metadata":{},"sourceType":"module"}