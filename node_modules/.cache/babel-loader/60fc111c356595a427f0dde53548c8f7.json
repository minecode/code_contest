{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/Navbar/index.tsx\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useFetch } from 'src/hooks/useFetch';\nimport Authentication from '../Authentication';\nimport { Container, Avatar, UserInfo, Auth } from './styles';\n\nconst Navbar = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n  const dataAuth = data.auth;\n  const authenticated = dataAuth.authenticated;\n  const userId = dataAuth.user.id;\n  const dataChallenge = data.challenge;\n  const challengeName = dataChallenge.name;\n  const {\n    data: globalScore\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: listOfUsers\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data: challengeScore\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  const {\n    data: userScore\n  } = useFetch(`http://localhost:4001/contests/${userId}/${challengeName}`);\n  const {\n    data: challengeIndex\n  } = useFetch(`/contents/contests/${challengeName === null || challengeName === void 0 ? void 0 : challengeName.split(' ').join('_')}/index.md`);\n  const handleSelectChange = useCallback(contest => {\n    const newData = {\n      data: {\n        auth: dataAuth,\n        challenge: dataChallenge,\n        globalScore: globalScore,\n        listOfUsers: listOfUsers,\n        challengeScore: challengeScore,\n        userScore: userScore,\n        challengeIndex: challengeIndex\n      }\n    };\n    dispatch({\n      type: 'CHALLENGE',\n      data: newData\n    });\n  }, [globalScore, listOfUsers, challengeScore, userScore, challengeIndex, dispatch]);\n\n  if (globalScore && listOfUsers && challengeScore && userScore && challengeIndex) {\n    dispatch({\n      type: 'CHALLENGE',\n      data: newData\n    });\n  }\n\n  console.log(useSelector(state => state.data));\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, authenticated.authenticated ? /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Welcome, \", authenticated.user.name, \"!\"), /*#__PURE__*/React.createElement(Avatar, {\n    src: authenticated.user.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Auth, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Authentication, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Navbar;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Navbar/index.tsx"],"names":["React","useDispatch","useSelector","useFetch","Authentication","Container","Avatar","UserInfo","Auth","Navbar","dispatch","data","state","dataAuth","auth","authenticated","userId","user","id","dataChallenge","challenge","challengeName","name","globalScore","listOfUsers","challengeScore","userScore","challengeIndex","split","join","handleSelectChange","useCallback","contest","newData","type","console","log","image"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useFetch } from 'src/hooks/useFetch'\n\nimport Authentication from '../Authentication'\nimport { Container, Avatar, UserInfo, Auth } from './styles'\n\ninterface User {\n\tuserId?: string;\n\tuser: UserApi;\n\tscore: number;\n}\n\ninterface UserApi {\n\tuserId: string;\n\tfirstName: string;\n\tlastName: string;\n\timageUrl: string;\n}\n\ninterface Challenge {\n  name: string;\n  content: string;\n}\n\nconst Navbar: React.FC = () => {\n  const dispatch = useDispatch()\n  const data = useSelector((state: any) => state.data)\n  const dataAuth = data.auth\n  const authenticated = dataAuth.authenticated\n  const userId = dataAuth.user.id\n  const dataChallenge = data.challenge\n  const challengeName = dataChallenge.name\n\n  const { data: globalScore } = useFetch<User[]>('http://localhost:4001/contests/global')\n  const { data: listOfUsers } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n  const { data: challengeScore } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n  const { data: userScore } = useFetch<User[]>(`http://localhost:4001/contests/${userId}/${challengeName}`)\n  const { data: challengeIndex } = useFetch<Challenge>(`/contents/contests/${challengeName?.split(' ').join('_')}/index.md`)\n\n  const handleSelectChange = useCallback(\n    (contest: string) => {\n      const newData = {\n        data: {\n          auth: dataAuth,\n          challenge: dataChallenge,\n          globalScore: globalScore,\n          listOfUsers: listOfUsers,\n          challengeScore: challengeScore,\n          userScore: userScore,\n          challengeIndex: challengeIndex\n        }\n      }\n\n      dispatch({ type: 'CHALLENGE', data: newData })\n    },\n    [globalScore, listOfUsers, challengeScore, userScore, challengeIndex, dispatch]\n  )\n\n  if (globalScore && listOfUsers && challengeScore && userScore && challengeIndex) {\n    dispatch({ type: 'CHALLENGE', data: newData })\n  }\n  console.log(useSelector((state: any) => state.data))\n  return (\n    <Container>\n      {authenticated.authenticated ? (\n        <UserInfo>\n          <span>Welcome, {authenticated.user.name}!</span>\n          <Avatar src={authenticated.user.image} />\n        </UserInfo>\n      ) : (\n        <></>\n      )}\n      <Auth>\n        <Authentication />\n      </Auth>\n    </Container>\n  )\n}\n\nexport default Navbar\n"]},"metadata":{},"sourceType":"module"}