{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { Container, Grid, ContainerList, Category } from './styles';\nimport ChallengeInfo from '../ChallengeInfo';\nimport ChallengeButton from '../ChallengeButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport Drop from '../Drop';\n\nconst Challenge = () => {\n  const [challengeName, setChallengeName] = useState('');\n  const [challengeSelected, setChallengeSelected] = useState('');\n  const {\n    data\n  } = useFetch('/contents/challenges');\n  const handleSelectChange = useCallback(id => {\n    var _document$getElementB;\n\n    const challenges = (_document$getElementB = document.getElementById('listOfChallenges')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.childNodes;\n    challenges === null || challenges === void 0 ? void 0 : challenges.forEach(challenge => {\n      if (challenge.isEqualNode(document.getElementById(id.toString()))) {\n        data === null || data === void 0 ? void 0 : data.forEach(selectedChallenge => {\n          var _challenge$firstChild;\n\n          const selectedChallengeName = selectedChallenge.name.split('_').join(' ');\n\n          if (selectedChallengeName === ((_challenge$firstChild = challenge.firstChild) === null || _challenge$firstChild === void 0 ? void 0 : _challenge$firstChild.textContent)) {\n            setChallengeName(selectedChallengeName);\n            setChallengeSelected(id.toString());\n          }\n        });\n      }\n    });\n  }, [data]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"Challenges\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfChallenges\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, data === null || data === void 0 ? void 0 : data.filter(challenge => {\n    return challenge.name !== 'requirements.txt';\n  }).map((challenge, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleSelectChange(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: challenge.name.split('_').join(' '),\n    selected: challengeSelected === i.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }))))), challengeName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ChallengeInfo, {\n    challengeName: challengeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 28\n    }\n  }), /*#__PURE__*/React.createElement(Drop, {\n    challengeName: challengeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 74\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n};\n\nexport default Challenge;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Challenge/index.tsx"],"names":["React","useCallback","useState","Container","Grid","ContainerList","Category","ChallengeInfo","ChallengeButton","useFetch","Drop","Challenge","challengeName","setChallengeName","challengeSelected","setChallengeSelected","data","handleSelectChange","id","challenges","document","getElementById","childNodes","forEach","challenge","isEqualNode","toString","selectedChallenge","selectedChallengeName","name","split","join","firstChild","textContent","filter","map","i"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport { Container, Grid, ContainerList, Category } from './styles'\n\nimport ChallengeInfo from '../ChallengeInfo'\nimport ChallengeButton from '../ChallengeButton'\n\nimport { useFetch } from 'src/hooks/useFetch'\nimport Drop from '../Drop'\n\ninterface Challenge {\n  name: string\n}\n\nconst Challenge: React.FC = () => {\n  const [challengeName, setChallengeName] = useState('')\n  const [challengeSelected, setChallengeSelected] = useState('')\n\n  const { data } = useFetch<Challenge[]>('/contents/challenges')\n  const handleSelectChange = useCallback((id: number) => {\n    const challenges = document.getElementById('listOfChallenges')?.childNodes\n    challenges?.forEach(challenge => {\n      if (challenge.isEqualNode(document.getElementById(id.toString()))) {\n        data?.forEach(selectedChallenge => {\n          const selectedChallengeName = selectedChallenge.name.split('_').join(' ')\n          if (selectedChallengeName === challenge.firstChild?.textContent) {\n            setChallengeName(selectedChallengeName)\n            setChallengeSelected(id.toString())\n          }\n        })\n      }\n    })\n  }, [data])\n\n  return (\n    <Container>\n      <Grid>\n        <ContainerList>\n          <Category>\n            <span>Challenges</span>\n          </Category>\n          <div id='listOfChallenges'>\n            {data?.filter((challenge: any) => {\n              return challenge.name !== 'requirements.txt'\n            }).map((challenge, i) => (\n              <div key={i} id={i.toString()} onClick={() => handleSelectChange(i)}>\n                <ChallengeButton challengeName={challenge.name.split('_').join(' ')} selected={challengeSelected === i.toString()}/>\n              </ div>\n            ))}\n          </div>\n        </ContainerList>\n        {challengeName ? <><ChallengeInfo challengeName={challengeName}/><Drop challengeName={challengeName} /></> : <></>}\n      </Grid>\n    </Container>\n  )\n}\n\nexport default Challenge\n"]},"metadata":{},"sourceType":"module"}