{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const dataAuth = useSelector(state => state.data.auth);\n  const [contestsActive, setContestsActive] = useState([]);\n  const {\n    data\n  } = useFetch('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n  const handleSelectChange = useCallback(contest => {\n    const newChallenge = {\n      data: {\n        auth: dataAuth,\n        challenge: {\n          name: `${contest}`\n        }\n      }\n    };\n    dispatch({\n      type: 'CHALLENGE',\n      data: newChallenge\n    });\n  }, [dataAuth, dispatch]);\n\n  const handleVisibleContest = contest => {\n    if (contestsActive.includes(contest)) {\n      setContestsActive(contestsActive.filter(item => item !== contest));\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: {\n            name: ''\n          }\n        }\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newChallenge\n      });\n    } else {\n      setContestsActive(contestsActive => [...contestsActive, contest]);\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: {\n            name: `${contest}/`\n          }\n        }\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newChallenge\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.tree.filter((contest, i) => {\n    return contest.path.split('/').length === 1 || contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt';\n  }).map((contest, i) => /*#__PURE__*/React.createElement(React.Fragment, null, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path.split('/')[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(ContestButton, {\n    contestName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 14\n    }\n  })) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split('/')[0],\n    onClick: () => handleSelectChange(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 111\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","useState","ContainerList","Category","ChallengeButton","ContestButton","useFetch","useSelector","useDispatch","ContestList","dispatch","dataAuth","state","data","auth","contestsActive","setContestsActive","handleSelectChange","contest","newChallenge","challenge","name","type","handleVisibleContest","includes","filter","item","tree","i","path","split","length","map","toString"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\n\nimport { ContainerList, Category } from './styles'\n\nimport ChallengeButton from '../ChallengeButton'\nimport ContestButton from '../ContestButton'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector, useDispatch } from 'react-redux'\n\ninterface Contest {\n  tree: Challenge []\n}\n\ninterface Challenge {\n  path: string;\n}\n\nconst ContestList: React.FC = () => {\n  const dispatch = useDispatch()\n  const dataAuth = useSelector((state: any) => state.data.auth)\n  const [contestsActive, setContestsActive] = useState<string []>([])\n\n  const { data } = useFetch<Contest>('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"')\n  const handleSelectChange = useCallback(\n    (contest: string) => {\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: { name: `${contest}` }\n        }\n      }\n      dispatch({ type: 'CHALLENGE', data: newChallenge })\n    },\n    [dataAuth, dispatch]\n  )\n\n  const handleVisibleContest = (contest: any) => {\n    if (contestsActive.includes(contest)) {\n      setContestsActive(contestsActive.filter(item => item !== contest))\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: { name: '' }\n        }\n      }\n      dispatch({ type: 'CHALLENGE', data: newChallenge })\n    } else {\n      setContestsActive(contestsActive => [...contestsActive, contest])\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: { name: `${contest}/` }\n        }\n      }\n      dispatch({ type: 'CHALLENGE', data: newChallenge })\n    }\n  }\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Contests</span>\n      </Category>\n      <div id='listOfContests'>\n        {data?.tree.filter((contest, i) => {\n          return (contest.path.split('/').length === 1 || (contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt'))\n        }).map((contest, i) => (\n          <>\n            {contest.path.split('/').length === 1 ? <div\n              key={i}\n              id={i.toString()}\n              onClick={() => handleVisibleContest(contest.path.split('/')[0])}\n            ><ContestButton contestName={contest.path}></ContestButton></div>\n              : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? <div\n                key={i}\n                id={i.toString()}\n                className={contest.path.split('/')[0]}\n                onClick={() => handleSelectChange(contest.path)}\n              >\n                <ChallengeButton\n                  challengeName={contest.path}\n                />\n              </div> : <></>\n            }\n          </>\n        ))}\n      </div>\n    </ContainerList>\n  )\n}\n\nexport default ContestList\n"]},"metadata":{},"sourceType":"module"}