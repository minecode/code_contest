{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx\";\nimport React, { useState } from 'react';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector } from 'react-redux';\nimport { Container, Role, User, Avatar } from './styles';\n\nconst UserRow = ({\n  user,\n  score\n}) => {\n  console.log(user);\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    src: userId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, userId), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const [userData, setUserData] = useState([]);\n  const contestChallenge = useSelector(state => state.data);\n  const challengeName = contestChallenge.challenge.name;\n  const {\n    data: initialData\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: userDataFetch\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, userDataFetch & challengeName ? /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 41\n    }\n  }, challengeName.split('/').join(' ').split('_').join(' ')) : /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 114\n    }\n  }, \"Global\"), data && data.length > 0 ? data.map(function (element, i) {\n    return /*#__PURE__*/React.createElement(UserRow, {\n      key: i,\n      user: userDataFetch[userId],\n      score: element.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }\n    });\n  }) : initialData ? initialData.map(function (element, i) {\n    return /*#__PURE__*/React.createElement(UserRow, {\n      key: i,\n      user: userDataFetch[userId],\n      score: element.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 18\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx"],"names":["React","useState","useFetch","useSelector","Container","Role","User","Avatar","UserRow","user","score","console","log","userId","UserList","userData","setUserData","contestChallenge","state","data","challengeName","challenge","name","initialData","userDataFetch","split","join","length","map","element","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,MAAhC,QAA8C,UAA9C;;AAcA,MAAMC,OAAuB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqB;AACnDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEI,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASA,MAAT,CAHF,eAID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOH,KAAP,CAJC,CADF;AASD,CAXD;;AAaA,MAAMI,QAAkB,GAAG,MAAM;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAY,EAAZ,CAAxC;AAEA,QAAMgB,gBAAgB,GAAGd,WAAW,CAAEe,KAAD,IAAgBA,KAAK,CAACC,IAAvB,CAApC;AACA,QAAMC,aAAa,GAAGH,gBAAgB,CAACI,SAAjB,CAA2BC,IAAjD;AAEA,QAAM;AAAEH,IAAAA,IAAI,EAAEI;AAAR,MAAwBrB,QAAQ,CAAS,uCAAT,CAAtC;AACA,QAAM;AAAEiB,IAAAA,IAAI,EAAEK;AAAR,MAA0BtB,QAAQ,CAAY,qCAAZ,CAAxC;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAWjB,QAAQ,CAAU,yCAAwCkB,aAAc,EAAhE,CAAzB;AAEA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACII,aAAa,GAAGJ,aAAhB,gBAAgC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,aAAa,CAACK,KAAd,CAAoB,GAApB,EAAyBC,IAAzB,CAA8B,GAA9B,EAAmCD,KAAnC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD,GAAnD,CAAP,CAAhC,gBAAyG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD7G,EAEIP,IAAI,IAAIA,IAAI,CAACQ,MAAL,GAAc,CAAtB,GAA0BR,IAAI,CAACS,GAAL,CAAS,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACzD,wBAAO,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,CAAd;AAAiB,MAAA,IAAI,EAAEN,aAAa,CAACX,MAAD,CAApC;AAA8C,MAAA,KAAK,EAAEgB,OAAO,CAACnB,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAF2B,CAA1B,GAGEa,WAAW,GAAGA,WAAW,CAACK,GAAZ,CAAgB,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACpD,wBAAO,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,CAAd;AAAiB,MAAA,IAAI,EAAEN,aAAa,CAACX,MAAD,CAApC;AAA8C,MAAA,KAAK,EAAEgB,OAAO,CAACnB,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFe,CAAH,gBAGT,yCARR,CADF;AAaD,CAvBD;;AAyBA,eAAeI,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector } from 'react-redux'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n  user: string;\n  score: number;\n}\n\ninterface UserApi {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  imageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ user, score }) => {\n  console.log(user)\n  return (\n    <User>\n      <Avatar src={userId}/>\n\n      <strong>{userId}</strong>\n\t  <span>{score}</span>\n\n    </User>\n  )\n}\n\nconst UserList: React.FC = () => {\n  const [userData, setUserData] = useState<UserApi[]>([])\n\n  const contestChallenge = useSelector((state: any) => state.data)\n  const challengeName = contestChallenge.challenge.name\n\n  const { data: initialData } = useFetch<User[]>('http://localhost:4001/contests/global')\n  const { data: userDataFetch } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n  const { data } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n\n  return (\n    <Container>\n      { userDataFetch & challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role> }\n      { data && data.length > 0 ? data.map(function (element, i) {\n        return <UserRow key={i} user={userDataFetch[userId]} score={element.score}/>\n      })\n        : initialData ? initialData.map(function (element, i) {\n          return <UserRow key={i} user={userDataFetch[userId]} score={element.score}/>\n        })\n          : <></>\n      }\n    </Container>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}