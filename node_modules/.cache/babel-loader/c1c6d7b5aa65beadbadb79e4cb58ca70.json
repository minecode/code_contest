{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx\";\nimport React from 'react';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector } from 'react-redux';\nimport { Container, Role, User, Avatar } from './styles';\n\nconst UserRow = ({\n  user,\n  score\n}) => {\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, user), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const contestChallenge = useSelector(state => state.data);\n  const challengeName = contestChallenge.challenge.name;\n  const {\n    data: initialData\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: userDataFetch\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, challengeName ? /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, challengeName.split('/').join(' ').split('_').join(' ')) : /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 98\n    }\n  }, \"Global\"), data && data.length > 0 && userDataFetch ? data.map(function (element, i) {\n    let getUser;\n    userDataFetch.forEach((element2, i2) => {\n      if (element2.userId === element.userId) {\n        getUser = element2;\n      }\n    });\n    console.log(getUser);\n    return /*#__PURE__*/React.createElement(UserRow, {\n      key: i,\n      user: getUser,\n      score: element.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }\n    });\n  }) : initialData && userDataFetch ? initialData.map(function (element, i) {\n    let getUser;\n    userDataFetch.forEach((element2, i2) => {\n      if (element2.userId === element.userId) {\n        getUser = element2;\n      }\n    });\n    return /*#__PURE__*/React.createElement(UserRow, {\n      key: i,\n      user: getUser,\n      score: element.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 18\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx"],"names":["React","useFetch","useSelector","Container","Role","User","Avatar","UserRow","user","score","UserList","contestChallenge","state","data","challengeName","challenge","name","initialData","userDataFetch","split","join","length","map","element","i","getUser","forEach","element2","i2","userId","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector } from 'react-redux'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n  userId?: string;\n  user: UserApi\n  score: number;\n}\n\ninterface UserApi {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  imageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ user, score }) => {\n  return (\n    <User>\n      <Avatar/>\n      <strong>{user}</strong>\n      <span>{score}</span>\n    </User>\n  )\n}\n\nconst UserList: React.FC = () => {\n  const contestChallenge = useSelector((state: any) => state.data)\n  const challengeName = contestChallenge.challenge.name\n\n  const { data: initialData } = useFetch<User[]>('http://localhost:4001/contests/global')\n  const { data: userDataFetch } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n  const { data } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n\n  return (\n    <Container>\n      { challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role> }\n      { data && data.length > 0 && userDataFetch ? data.map(function (element, i) {\n        let getUser: UserApi\n        userDataFetch.forEach((element2, i2) => {\n          if (element2.userId === element.userId) {\n            getUser = element2\n          }\n        })\n        console.log(getUser)\n        return <UserRow key={i} user={getUser} score={element.score}/>\n      })\n        : initialData && userDataFetch ? initialData.map(function (element, i) {\n          let getUser: UserApi\n          userDataFetch.forEach((element2, i2) => {\n            if (element2.userId === element.userId) {\n              getUser = element2\n            }\n          })\n          return <UserRow key={i} user={getUser} score={element.score}/>\n        })\n          : <></>\n      }\n    </Container>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}