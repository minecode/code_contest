{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { ContainerList, Category } from './styles';\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const dataAuth = useSelector(state => state.data.auth);\n  const [contestsActive, setContestsActive] = useState([]);\n  const {\n    data\n  } = useFetch('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n  const handleSelectChange = useCallback(contest => {\n    const newChallenge = {\n      data: {\n        auth: dataAuth,\n        challenge: {\n          name: `${contest}`\n        }\n      }\n    };\n    dispatch({\n      type: 'CHALLENGE',\n      data: newChallenge\n    });\n  }, [dataAuth, dispatch]);\n\n  const handleVisibleContest = contest => {\n    if (contestsActive.includes(contest)) {\n      setContestsActive(contestsActive.filter(item => item !== contest));\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: {\n            name: ''\n          }\n        }\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newChallenge\n      });\n    } else {\n      setContestsActive(contestsActive => [...contestsActive, contest]);\n      const newChallenge = {\n        data: {\n          auth: dataAuth,\n          challenge: {\n            name: `${contest}/`\n          }\n        }\n      };\n      dispatch({\n        type: 'CHALLENGE',\n        data: newChallenge\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, \"Contests\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }\n  }, data === null || data === void 0 ? void 0 : data.tree.filter((contest, i) => {\n    return contest.path.split('/').length === 1 || contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt';\n  }).map((contest, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, contest.path.split('/').length === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path.split('/')[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ContestButton, {\n    contestName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  })) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split('/')[0],\n    onClick: () => handleSelectChange(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default ContestList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/ContestList/index.tsx"],"names":["React","useCallback","useState","ContainerList","Category","ChallengeButton","ContestButton","useFetch","useSelector","useDispatch","ContestList","dispatch","dataAuth","state","data","auth","contestsActive","setContestsActive","handleSelectChange","contest","newChallenge","challenge","name","type","handleVisibleContest","includes","filter","item","tree","i","path","split","length","map","toString"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport { ContainerList, Category } from './styles';\n\nimport ChallengeButton from '../ChallengeButton';\nimport ContestButton from '../ContestButton';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\ninterface Contest {\n\ttree: Challenge[];\n}\n\ninterface Challenge {\n\tpath: string;\n}\n\nconst ContestList: React.FC = () => {\n\tconst dispatch = useDispatch();\n\tconst dataAuth = useSelector((state: any) => state.data.auth);\n\tconst [contestsActive, setContestsActive] = useState<string[]>([]);\n\n\tconst { data } = useFetch<Contest>('/git/trees/bed6cd92797d728d25ec5b2ecca010f03196cbdb?recursive=\"true\"');\n\tconst handleSelectChange = useCallback(\n\t\t(contest: string) => {\n\t\t\tconst newChallenge = {\n\t\t\t\tdata: {\n\t\t\t\t\tauth: dataAuth,\n\t\t\t\t\tchallenge: { name: `${contest}` },\n\t\t\t\t},\n\t\t\t};\n\t\t\tdispatch({ type: 'CHALLENGE', data: newChallenge });\n\t\t},\n\t\t[dataAuth, dispatch]\n\t);\n\n\tconst handleVisibleContest = (contest: any) => {\n\t\tif (contestsActive.includes(contest)) {\n\t\t\tsetContestsActive(contestsActive.filter((item) => item !== contest));\n\t\t\tconst newChallenge = {\n\t\t\t\tdata: {\n\t\t\t\t\tauth: dataAuth,\n\t\t\t\t\tchallenge: { name: '' },\n\t\t\t\t},\n\t\t\t};\n\t\t\tdispatch({ type: 'CHALLENGE', data: newChallenge });\n\t\t} else {\n\t\t\tsetContestsActive((contestsActive) => [...contestsActive, contest]);\n\t\t\tconst newChallenge = {\n\t\t\t\tdata: {\n\t\t\t\t\tauth: dataAuth,\n\t\t\t\t\tchallenge: { name: `${contest}/` },\n\t\t\t\t},\n\t\t\t};\n\t\t\tdispatch({ type: 'CHALLENGE', data: newChallenge });\n\t\t}\n\t};\n\n\treturn (\n\t\t<ContainerList>\n\t\t\t<Category>\n\t\t\t\t<span>Contests</span>\n\t\t\t</Category>\n\t\t\t<div id='listOfContests'>\n\t\t\t\t{data?.tree\n\t\t\t\t\t.filter((contest, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tcontest.path.split('/').length === 1 ||\n\t\t\t\t\t\t\t(contest.path.split('/').length === 2 && contest.path.split('/')[1] !== 'requirements.txt')\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.map((contest, i) => (\n\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t{contest.path.split('/').length === 1 ? (\n\t\t\t\t\t\t\t\t<div key={i} id={i.toString()} onClick={() => handleVisibleContest(contest.path.split('/')[0])}>\n\t\t\t\t\t\t\t\t\t<ContestButton contestName={contest.path}></ContestButton>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : contest.path.split('/').length === 2 && contestsActive.includes(contest.path.split('/')[0]) ? (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\tid={i.toString()}\n\t\t\t\t\t\t\t\t\tclassName={contest.path.split('/')[0]}\n\t\t\t\t\t\t\t\t\tonClick={() => handleSelectChange(contest.path)}>\n\t\t\t\t\t\t\t\t\t<ChallengeButton challengeName={contest.path} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t</div>\n\t\t</ContainerList>\n\t);\n};\n\nexport default ContestList;\n"]},"metadata":{},"sourceType":"module"}