{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx\";\nimport React from 'react';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector } from 'react-redux';\nimport { Container, Role, User, Avatar } from './styles';\n\nconst UserRow = ({\n  userId,\n  score\n}) => {\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, userId), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const authentication = useSelector(state => state.data.auth);\n  const {\n    data\n  } = useFetch('http://localhost:4001/contests/global');\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Dispon\\xEDvel - 1\"), data ? data.map(function (element, i) {\n    return /*#__PURE__*/React.createElement(UserRow, {\n      key: i,\n      userId: element.userId,\n      score: element.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx"],"names":["React","useFetch","useSelector","Container","Role","User","Avatar","UserRow","userId","score","UserList","authentication","state","data","auth","map","element","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,MAAhC,QAA8C,UAA9C;;AAOA,MAAMC,OAAuB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAuB;AACrD,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASD,MAAT,CAHF,eAID;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,KAAP,CAJC,CADF;AASD,CAVD;;AAYA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAMC,cAAc,GAAGT,WAAW,CAAEU,KAAD,IAAgBA,KAAK,CAACC,IAAN,CAAWC,IAA5B,CAAlC;AAEA,QAAM;AAAED,IAAAA;AAAF,MAAWZ,QAAQ,CAAS,uCAAT,CAAzB;AAEA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEIY,IAAI,GAAGA,IAAI,CAACE,GAAL,CAAS,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AACtC,wBAAO,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,CAAd;AAAiB,MAAA,MAAM,EAAED,OAAO,CAACR,MAAjC;AAAyC,MAAA,KAAK,EAAEQ,OAAO,CAACP,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFQ,CAAH,gBAGF,yCALN,CADF;AAUD,CAfD;;AAiBA,eAAeC,QAAf","sourcesContent":["import React from 'react'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector } from 'react-redux'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n\tuserId: string;\n\tscore: number;\n  }\n\nconst UserRow: React.FC<User> = ({ userId, score }) => {\n  return (\n    <User>\n      <Avatar/>\n\n      <strong>{userId}</strong>\n\t  <span>{score}</span>\n\n    </User>\n  )\n}\n\nconst UserList: React.FC = () => {\n  const authentication = useSelector((state: any) => state.data.auth)\n\n  const { data } = useFetch<User[]>('http://localhost:4001/contests/global')\n\n  return (\n    <Container>\n      <Role>Dispon√≠vel - 1</Role>\n      { data ? data.map(function (element, i) {\n        return <UserRow key={i} userId={element.userId} score={element.score}/>\n      })\n        : <></>\n      }\n    </Container>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}