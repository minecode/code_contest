{"ast":null,"code":"export function titleCase(str) {\n  str = str.split('_').join(' ');\n  const splitStr = str.toLowerCase().split(' ');\n\n  for (let i = 0; i < splitStr.length; i++) {\n    // You do not need to check if i is larger than splitStr length, as your for does that for you\n    // Assign it back to the array\n    splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n  } // Directly return the joined string\n\n\n  return splitStr.join(' ');\n}\nexport const login = response => {\n  const newAuth = {\n    data: {\n      auth: {\n        authenticated: true,\n        user: {\n          id: response.googleId,\n          name: response.profileObj.givenName,\n          surname: response.profileObj.familyName,\n          image: response.profileObj.imageUrl\n        },\n        token: response.tokenId\n      }\n    }\n  };\n  dispatch({\n    type: 'LOGIN',\n    data: newAuth\n  });\n};\nexport const badResponseGoogle = response => {\n  console.log(response);\n  dispatch({\n    type: 'BAD_RESPONSE',\n    data: null\n  });\n};\nexport const logout = () => {\n  const newAuth = {\n    data: {\n      auth: {\n        authenticated: false,\n        user: {\n          id: null,\n          name: null,\n          surname: null,\n          image: null\n        },\n        token: null\n      }\n    }\n  };\n  dispatch({\n    type: 'LOGOUT',\n    data: newAuth\n  });\n};","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/Utils/index.tsx"],"names":["titleCase","str","split","join","splitStr","toLowerCase","i","length","charAt","toUpperCase","substring","login","response","newAuth","data","auth","authenticated","user","id","googleId","name","profileObj","givenName","surname","familyName","image","imageUrl","token","tokenId","dispatch","type","badResponseGoogle","console","log","logout"],"mappings":"AAEA,OAAO,SAASA,SAAT,CAAoBC,GAApB,EAAiC;AACtCA,EAAAA,GAAG,GAAGA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,GAApB,CAAN;AACA,QAAMC,QAAQ,GAAGH,GAAG,CAACI,WAAJ,GAAkBH,KAAlB,CAAwB,GAAxB,CAAjB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC;AACA;AACAF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcF,QAAQ,CAACE,CAAD,CAAR,CAAYE,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,KAAsCL,QAAQ,CAACE,CAAD,CAAR,CAAYI,SAAZ,CAAsB,CAAtB,CAApD;AACD,GAPqC,CAQtC;;;AACA,SAAON,QAAQ,CAACD,IAAT,CAAc,GAAd,CAAP;AACD;AAED,OAAO,MAAMQ,KAAK,GAAIC,QAAD,IAAmB;AACtC,QAAMC,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE;AACJC,QAAAA,aAAa,EAAE,IADX;AAEJC,QAAAA,IAAI,EAAE;AACJC,UAAAA,EAAE,EAAEN,QAAQ,CAACO,QADT;AAEJC,UAAAA,IAAI,EAAER,QAAQ,CAACS,UAAT,CAAoBC,SAFtB;AAGJC,UAAAA,OAAO,EAAEX,QAAQ,CAACS,UAAT,CAAoBG,UAHzB;AAIJC,UAAAA,KAAK,EAAEb,QAAQ,CAACS,UAAT,CAAoBK;AAJvB,SAFF;AAQJC,QAAAA,KAAK,EAAEf,QAAQ,CAACgB;AARZ;AADF;AADQ,GAAhB;AAcAC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBhB,IAAAA,IAAI,EAAED;AAAvB,GAAD,CAAR;AACD,CAhBM;AAkBP,OAAO,MAAMkB,iBAAiB,GAAInB,QAAD,IAAmB;AAClDoB,EAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAZ;AACAiB,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE,cAAR;AAAwBhB,IAAAA,IAAI,EAAE;AAA9B,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMoB,MAAM,GAAG,MAAM;AAC1B,QAAMrB,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE;AACJC,QAAAA,aAAa,EAAE,KADX;AAEJC,QAAAA,IAAI,EAAE;AACJC,UAAAA,EAAE,EAAE,IADA;AAEJE,UAAAA,IAAI,EAAE,IAFF;AAGJG,UAAAA,OAAO,EAAE,IAHL;AAIJE,UAAAA,KAAK,EAAE;AAJH,SAFF;AAQJE,QAAAA,KAAK,EAAE;AARH;AADF;AADQ,GAAhB;AAcAE,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE,QAAR;AAAkBhB,IAAAA,IAAI,EAAED;AAAxB,GAAD,CAAR;AACD,CAhBM","sourcesContent":["import { useDispatch } from 'react-redux'\n\nexport function titleCase (str: string) {\n  str = str.split('_').join(' ')\n  const splitStr = str.toLowerCase().split(' ')\n  for (let i = 0; i < splitStr.length; i++) {\n    // You do not need to check if i is larger than splitStr length, as your for does that for you\n    // Assign it back to the array\n    splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n  }\n  // Directly return the joined string\n  return splitStr.join(' ')\n}\n\nexport const login = (response: any) => {\n  const newAuth = {\n    data: {\n      auth: {\n        authenticated: true,\n        user: {\n          id: response.googleId,\n          name: response.profileObj.givenName,\n          surname: response.profileObj.familyName,\n          image: response.profileObj.imageUrl\n        },\n        token: response.tokenId\n      }\n    }\n  }\n  dispatch({ type: 'LOGIN', data: newAuth })\n}\n\nexport const badResponseGoogle = (response: any) => {\n  console.log(response)\n  dispatch({ type: 'BAD_RESPONSE', data: null })\n}\n\nexport const logout = () => {\n  const newAuth = {\n    data: {\n      auth: {\n        authenticated: false,\n        user: {\n          id: null,\n          name: null,\n          surname: null,\n          image: null\n        },\n        token: null\n      }\n    }\n  }\n  dispatch({ type: 'LOGOUT', data: newAuth })\n}\n"]},"metadata":{},"sourceType":"module"}