{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx\";\nimport React from 'react';\nimport { useFetch } from 'src/hooks/useFetch';\nimport { useSelector } from 'react-redux';\nimport base64 from 'base-64';\nimport { Container, Role, User, Avatar } from './styles';\n\nconst UserRow = ({\n  user,\n  score\n}) => {\n  return /*#__PURE__*/React.createElement(User, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    src: base64.decode(user.imageUrl),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, user.firstName, \" \", user.lastName), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, score));\n};\n\nconst UserList = () => {\n  const contestChallenge = useSelector(state => state.data);\n  const challengeName = contestChallenge.challenge.name;\n  const {\n    data: initialData\n  } = useFetch('http://localhost:4001/contests/global');\n  const {\n    data: userDataFetch\n  } = useFetch('http://localhost:4001/contests/user');\n  const {\n    data\n  } = useFetch(`http://localhost:4001/contests/global/${challengeName}`);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, challengeName ? /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 24\n    }\n  }, challengeName.split('/').join(' ').split('_').join(' ')) : /*#__PURE__*/React.createElement(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 97\n    }\n  }, \"Global\"), data && data.length > 0 && userDataFetch ? data.map(function (element, i) {\n    const getUser = userDataFetch.filter(element2 => {\n      return element2.userId === element.userId;\n    });\n    const user = getUser.pop();\n\n    if (user) {\n      return /*#__PURE__*/React.createElement(UserRow, {\n        key: i,\n        user: user,\n        score: element.score,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 20\n        }\n      });\n    }\n  }) : initialData && userDataFetch ? initialData.map(function (element, i) {\n    const getUser = userDataFetch.filter(element2 => {\n      return element2.userId === element.userId;\n    });\n    const user = getUser.pop();\n\n    if (user) {\n      return /*#__PURE__*/React.createElement(UserRow, {\n        key: i,\n        user: user,\n        score: element.score,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 20\n        }\n      });\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest/src/components/UserList/index.tsx"],"names":["React","useFetch","useSelector","base64","Container","Role","User","Avatar","UserRow","user","score","decode","imageUrl","firstName","lastName","UserList","contestChallenge","state","data","challengeName","challenge","name","initialData","userDataFetch","split","join","length","map","element","i","getUser","filter","element2","userId","pop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useFetch } from 'src/hooks/useFetch'\nimport { useSelector } from 'react-redux'\nimport base64 from 'base-64'\n\nimport { Container, Role, User, Avatar } from './styles'\n\ninterface User {\n\tuserId?: string;\n\tuser: UserApi;\n\tscore: number;\n}\n\ninterface UserApi {\n\tuserId: string;\n\tfirstName: string;\n\tlastName: string;\n\timageUrl: string;\n}\n\nconst UserRow: React.FC<User> = ({ user, score }) => {\n  return (\n    <User>\n      <Avatar src={base64.decode(user.imageUrl)} />\n      <strong>{user.firstName} {user.lastName}</strong>\n      <span>{score}</span>\n    </User>\n  )\n}\n\nconst UserList: React.FC = () => {\n  const contestChallenge = useSelector((state: any) => state.data)\n  const challengeName = contestChallenge.challenge.name\n\n  const { data: initialData } = useFetch<User[]>('http://localhost:4001/contests/global')\n  const { data: userDataFetch } = useFetch<UserApi[]>('http://localhost:4001/contests/user')\n  const { data } = useFetch<User[]>(`http://localhost:4001/contests/global/${challengeName}`)\n\n  return (\n    <Container>\n      {challengeName ? <Role>{challengeName.split('/').join(' ').split('_').join(' ')}</Role> : <Role>Global</Role>}\n      {data && data.length > 0 && userDataFetch ? (\n        data.map(function (element, i) {\n          const getUser: UserApi[] = userDataFetch.filter((element2) => {\n            return element2.userId === element.userId\n\t\t  })\n          const user = getUser.pop()\n          if (user) {\n            return <UserRow key={i} user={user} score={element.score} />\n          }\n        })\n      ) : initialData && userDataFetch ? (\n        initialData.map(function (element, i) {\n          const getUser: UserApi[] = userDataFetch.filter((element2) => {\n            return element2.userId === element.userId\n          })\n          const user = getUser.pop()\n          if (user) {\n            return <UserRow key={i} user={user} score={element.score} />\n          }\n        })\n      ) : (\n        <></>\n      )}\n    </Container>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}