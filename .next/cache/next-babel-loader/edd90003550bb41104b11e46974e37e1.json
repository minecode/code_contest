{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/ContestList/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from \"react\";\nimport ContestButton from \"../ContestButton\";\nimport ChallengeButton from \"../ChallengeButton\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContainerList, Category } from \"./ContestList\";\n\nconst ContestList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n  const dataTree = useSelector(state => state.data.tree);\n  const {\n    0: contestsActive,\n    1: setContestsActive\n  } = useState(\"\");\n  const handleSelectChange = useCallback(contest => {\n    const newData = {\n      data: data\n    };\n    newData.data.selectedChallenge = {\n      name: `${contest}`\n    };\n    dispatch({\n      type: \"CHALLENGE\",\n      data: newData\n    });\n  }, [dispatch, data]);\n\n  const handleVisibleContest = contest => {\n    if (contestsActive === contest) {\n      setContestsActive(\"\");\n      const newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: \"\"\n      };\n      dispatch({\n        type: \"CHALLENGE\",\n        data: newData\n      });\n    } else {\n      setContestsActive(contest);\n      const newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: `${contest}/`\n      };\n      dispatch({\n        type: \"CHALLENGE\",\n        data: newData\n      });\n    }\n  };\n\n  return __jsx(ContainerList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Category, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Contests\")), __jsx(\"div\", {\n    id: \"listOfContests\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, dataTree && (dataTree === null || dataTree === void 0 ? void 0 : dataTree.tree.filter(contest => {\n    return !contest.path.includes(\".github\") && (contest.path.split(\"/\").length === 1 || contest.path.split(\"/\").length === 2 && contest.path.split(\"/\")[1] !== \"requirements.txt\");\n  }).map((contest, i) => __jsx(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, contest.path.split(\"/\").length === 1 ? __jsx(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path.split(\"/\")[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, __jsx(ContestButton, {\n    contestName: contest.path,\n    size: dataTree.tree.filter(elem => {\n      return elem.path.includes(contest.path) && elem.path.split(\"/\").length === 2 && elem.path.split(\"/\")[1] !== \"requirements.txt\";\n    }).length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  })) : contest.path.split(\"/\").length === 2 && contestsActive.includes(contest.path.split(\"/\")[0]) ? __jsx(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split(\"/\")[0],\n    onClick: () => handleSelectChange(contest.path),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, __jsx(ChallengeButton, {\n    challengeName: contest.path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  })) : __jsx(React.Fragment, null))))));\n};\n\n_s(ContestList, \"17u/iCibsPApgD7jZWM/lW6Pv9U=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ContestList;\nexport default ContestList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContestList\");","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/ContestList/index.tsx"],"names":["React","useCallback","useState","ContestButton","ChallengeButton","useDispatch","useSelector","ContainerList","Category","ContestList","dispatch","data","state","dataTree","tree","contestsActive","setContestsActive","handleSelectChange","contest","newData","selectedChallenge","name","type","handleVisibleContest","filter","path","includes","split","length","map","i","toString","elem"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport ContestButton from \"../ContestButton\";\nimport ChallengeButton from \"../ChallengeButton\";\nimport { Challenge, Data } from \"../Interface\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContainerList, Category } from \"./ContestList\";\n\nconst ContestList: React.FC = () => {\n  const dispatch = useDispatch();\n  const data = useSelector((state: Data) => state.data);\n  const dataTree = useSelector((state: Data) => state.data.tree);\n\n  const [contestsActive, setContestsActive] = useState<string>(\"\");\n\n  const handleSelectChange = useCallback(\n    (contest: string) => {\n      const newData = { data: data };\n      newData.data.selectedChallenge = { name: `${contest}` };\n      dispatch({ type: \"CHALLENGE\", data: newData });\n    },\n    [dispatch, data]\n  );\n\n  const handleVisibleContest = (contest: string) => {\n    if (contestsActive === contest) {\n      setContestsActive(\"\");\n      const newData = { data: data };\n      newData.data.selectedChallenge = { name: \"\" };\n      dispatch({ type: \"CHALLENGE\", data: newData });\n    } else {\n      setContestsActive(contest);\n      const newData = { data: data };\n      newData.data.selectedChallenge = { name: `${contest}/` };\n      dispatch({ type: \"CHALLENGE\", data: newData });\n    }\n  };\n\n  return (\n    <ContainerList>\n      <Category>\n        <span>Contests</span>\n      </Category>\n      <div id=\"listOfContests\">\n        {dataTree &&\n          dataTree?.tree\n            .filter((contest: Challenge) => {\n              return (\n                !contest.path.includes(\".github\") &&\n                (contest.path.split(\"/\").length === 1 ||\n                  (contest.path.split(\"/\").length === 2 &&\n                    contest.path.split(\"/\")[1] !== \"requirements.txt\"))\n              );\n            })\n            .map((contest: Challenge, i: number) => (\n              <div key={i}>\n                {contest.path.split(\"/\").length === 1 ? (\n                  <div\n                    key={i}\n                    id={i.toString()}\n                    onClick={() =>\n                      handleVisibleContest(contest.path.split(\"/\")[0])\n                    }\n                  >\n                    <ContestButton\n                      contestName={contest.path}\n                      size={\n                        dataTree.tree.filter((elem: Challenge) => {\n                          return (\n                            elem.path.includes(contest.path) &&\n                            elem.path.split(\"/\").length === 2 &&\n                            elem.path.split(\"/\")[1] !== \"requirements.txt\"\n                          );\n                        }).length\n                      }\n                    ></ContestButton>\n                  </div>\n                ) : contest.path.split(\"/\").length === 2 &&\n                  contestsActive.includes(contest.path.split(\"/\")[0]) ? (\n                  <div\n                    key={i}\n                    id={i.toString()}\n                    className={contest.path.split(\"/\")[0]}\n                    onClick={() => handleSelectChange(contest.path)}\n                  >\n                    <ChallengeButton challengeName={contest.path} />\n                  </div>\n                ) : (\n                  <></>\n                )}\n              </div>\n            ))}\n      </div>\n    </ContainerList>\n  );\n};\n\nexport default ContestList;\n"]},"metadata":{},"sourceType":"module"}