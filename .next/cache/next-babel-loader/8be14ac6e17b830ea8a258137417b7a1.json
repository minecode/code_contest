{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/UserList/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport base64 from \"base-64\";\nimport { useSelector } from \"react-redux\";\nimport { Container, Role, User as UserElem, Avatar } from \"./UserList\";\n\nconst UserRow = ({\n  user,\n  score\n}) => {\n  return __jsx(UserElem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Avatar, {\n    src: base64.decode(user.imageUrl),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, user.firstName, \" \", user.lastName), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, score));\n};\n\n_c = UserRow;\n\nconst UserList = () => {\n  _s();\n\n  const globalScore = useSelector(state => state.data.globalScore);\n  const listOfUsers = useSelector(state => state.data.listOfUsers);\n  const challengeScore = useSelector(state => state.data.challengeScore);\n  const challengeName = useSelector(state => state.data.selectedChallenge.name);\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, challengeName ? __jsx(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, challengeName.split(\"/\").join(\" \").split(\"_\").join(\" \")) : __jsx(Role, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Global\"), challengeScore && challengeScore.length > 0 && listOfUsers ? challengeScore.map(function (element, i) {\n    const getUser = listOfUsers.filter(element2 => {\n      return element2.userId === element.userId;\n    });\n    const user = getUser.pop();\n\n    if (user) {\n      return __jsx(UserRow, {\n        key: i,\n        user: user,\n        score: element.score,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return __jsx(React.Fragment, null);\n    }\n  }) : globalScore && listOfUsers && !challengeName ? globalScore.map(function (element, i) {\n    const getUser = listOfUsers.filter(element2 => {\n      return element2.userId === element.userId;\n    });\n    const user = getUser.pop();\n\n    if (user) {\n      return __jsx(UserRow, {\n        key: i,\n        user: user,\n        score: element.score,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return __jsx(React.Fragment, null);\n    }\n  }) : __jsx(React.Fragment, null));\n};\n\n_s(UserList, \"f/swZKURAsSO+fHpScR397JgMWE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n\n_c2 = UserList;\nexport default UserList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserRow\");\n$RefreshReg$(_c2, \"UserList\");","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/UserList/index.tsx"],"names":["React","base64","useSelector","Container","Role","User","UserElem","Avatar","UserRow","user","score","decode","imageUrl","firstName","lastName","UserList","globalScore","state","data","listOfUsers","challengeScore","challengeName","selectedChallenge","name","split","join","length","map","element","i","getUser","filter","element2","userId","pop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport base64 from \"base-64\";\nimport { useSelector } from \"react-redux\";\nimport { User, UserApi, Data } from \"../Interface\";\nimport {\n  Container,\n  Role,\n  User as UserElem,\n  Avatar,\n} from \"./UserList\";\n\nexport interface Props {\n  user: {\n    firstName: string;\n    lastName: string;\n    imageUrl: string;\n  };\n  score: number;\n}\n\nconst UserRow: React.FC<Props> = ({ user, score }) => {\n  return (\n    <UserElem>\n      <Avatar src={base64.decode(user.imageUrl)} />\n      <strong>\n        {user.firstName} {user.lastName}\n      </strong>\n      <span>{score}</span>\n    </UserElem>\n  );\n};\n\nconst UserList: React.FC = () => {\n  const globalScore: User[] = useSelector(\n    (state: Data) => state.data.globalScore\n  );\n  const listOfUsers: UserApi[] = useSelector(\n    (state: Data) => state.data.listOfUsers\n  );\n  const challengeScore: User[] = useSelector(\n    (state: Data) => state.data.challengeScore\n  );\n  const challengeName: string = useSelector(\n    (state: Data) => state.data.selectedChallenge.name\n  );\n\n  return (\n    <Container>\n      {challengeName ? (\n        <Role>{challengeName.split(\"/\").join(\" \").split(\"_\").join(\" \")}</Role>\n      ) : (\n        <Role>Global</Role>\n      )}\n      {challengeScore && challengeScore.length > 0 && listOfUsers ? (\n        challengeScore.map(function (element, i) {\n          const getUser: UserApi[] = listOfUsers.filter((element2) => {\n            return element2.userId === element.userId;\n          });\n          const user = getUser.pop();\n          if (user) {\n            return <UserRow key={i} user={user} score={element.score} />;\n          } else {\n            return <></>;\n          }\n        })\n      ) : globalScore && listOfUsers && !challengeName ? (\n        globalScore.map(function (element, i) {\n          const getUser: UserApi[] = listOfUsers.filter((element2) => {\n            return element2.userId === element.userId;\n          });\n          const user = getUser.pop();\n          if (user) {\n            return <UserRow key={i} user={user} score={element.score} />;\n          } else {\n            return <></>;\n          }\n        })\n      ) : (\n        <></>\n      )}\n    </Container>\n  );\n};\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}