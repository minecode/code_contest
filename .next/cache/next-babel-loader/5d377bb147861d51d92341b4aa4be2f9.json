{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/ChallengeInfo/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport base64 from \"base-64\";\nimport ReactMarkdown from \"react-markdown\";\nimport { titleCase } from \"../Utils\";\nimport { useSelector } from \"react-redux\";\nimport { ContainerInfo, ContainerDescription, Title, Info } from \"./ChallengeInfo\";\n\nconst ChallengeInfo = () => {\n  _s();\n\n  const challengeIndex = useSelector(state => state.data.challengeIndex);\n  const selectedChallengeName = useSelector(state => state.data.selectedChallenge.name);\n  return __jsx(React.Fragment, null, __jsx(ContainerInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, titleCase(selectedChallengeName.split(\"/\")[1]))), __jsx(ContainerDescription, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, __jsx(Info, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, challengeIndex && base64.decode(challengeIndex.content).length > 1 ? __jsx(ReactMarkdown, {\n    source: base64.decode(challengeIndex.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }) : \"\")));\n};\n\n_s(ChallengeInfo, \"HJ2Be/f0y95HXYaB3ydtks2FbmM=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChallengeInfo;\nexport default ChallengeInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeInfo\");","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/ChallengeInfo/index.tsx"],"names":["React","base64","ReactMarkdown","titleCase","useSelector","ContainerInfo","ContainerDescription","Title","Info","ChallengeInfo","challengeIndex","state","data","selectedChallengeName","selectedChallenge","name","split","decode","content","length"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,aADF,EAEEC,oBAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,iBALP;;AAOA,MAAMC,aAAuB,GAAG,MAAM;AAAA;;AACpC,QAAMC,cAAc,GAAGN,WAAW,CAC/BO,KAAD,IAAiBA,KAAK,CAACC,IAAN,CAAWF,cADI,CAAlC;AAGA,QAAMG,qBAAqB,GAAGT,WAAW,CACtCO,KAAD,IAAiBA,KAAK,CAACC,IAAN,CAAWE,iBAAX,CAA6BC,IADP,CAAzC;AAIA,SACE,4BACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,SAAS,CAACU,qBAAqB,CAACG,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAD,CADZ,CADF,CADF,EAME,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,cAAc,IACfT,MAAM,CAACgB,MAAP,CAAcP,cAAc,CAACQ,OAA7B,EAAsCC,MAAtC,GAA+C,CAD9C,GAEC,MAAC,aAAD;AAAe,IAAA,MAAM,EAAElB,MAAM,CAACgB,MAAP,CAAcP,cAAc,CAACQ,OAA7B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,GAIC,EALJ,CADF,CANF,CADF;AAmBD,CA3BD;;GAAMT,a;UACmBL,W,EAGOA,W;;;KAJ1BK,a;AA6BN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport base64 from \"base-64\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Data } from \"../Interface\";\nimport { titleCase } from \"../Utils\";\nimport { useSelector } from \"react-redux\";\nimport {\n  ContainerInfo,\n  ContainerDescription,\n  Title,\n  Info,\n} from \"./ChallengeInfo\";\n\nconst ChallengeInfo: React.FC = () => {\n  const challengeIndex = useSelector(\n    (state: Data) => state.data.challengeIndex\n  );\n  const selectedChallengeName = useSelector(\n    (state: Data) => state.data.selectedChallenge.name\n  );\n\n  return (\n    <>\n      <ContainerInfo>\n        <Title>\n          {titleCase(selectedChallengeName.split(\"/\")[1] as string)}\n        </Title>\n      </ContainerInfo>\n      <ContainerDescription>\n        <Info>\n          {challengeIndex &&\n          base64.decode(challengeIndex.content).length > 1 ? (\n            <ReactMarkdown source={base64.decode(challengeIndex.content)} />\n          ) : (\n            \"\"\n          )}\n        </Info>\n      </ContainerDescription>\n    </>\n  );\n};\n\nexport default ChallengeInfo;\n"]},"metadata":{},"sourceType":"module"}