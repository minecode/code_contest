{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/code_contest_frontend/src/components/LoginMessage/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport base64 from \"base-64\";\nimport apiDatabase from \"../../services/apiDatabase\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { BtnGoogle } from \"../Authentication/Authentication\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { LoginInfo, LoginMessage } from \"./LoginMessage\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Challenge = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n\n  const login = async response => {\n    const newData = {\n      data: data\n    };\n    newData.data.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl\n      },\n      token: response.tokenId\n    };\n    await apiDatabase.post(`/user/${response.googleId}/${response.profileObj.givenName}/${response.profileObj.familyName}/${base64.encode(response.profileObj.imageUrl)}`);\n    dispatch({\n      type: \"LOGIN\",\n      data: newData\n    });\n  };\n\n  const badResponseGoogle = response => {\n    dispatch({\n      type: \"BAD_RESPONSE\",\n      data: null\n    });\n  };\n\n  return __jsx(LoginMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(LoginInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"You need to\", \" \", __jsx(GoogleLogin, {\n    clientId: \"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\",\n    buttonText: \"Login\",\n    onSuccess: login,\n    onFailure: badResponseGoogle,\n    cookiePolicy: \"single_host_origin\",\n    isSignedIn: true,\n    render: renderProps => __jsx(BtnGoogle, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \"Sign In w/ Google\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), \" \", \"to send your solution!\"))));\n};\n\n_s(Challenge, \"VrJnXoQP2+XQ+/f/72CAYzsOD3w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Challenge;\nexport default Challenge;\n\nvar _c;\n\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"sources":["/home/ubuntu/Desktop/code_contest_frontend/src/components/LoginMessage/index.tsx"],"names":["React","base64","apiDatabase","Col","Row","BtnGoogle","GoogleLogin","LoginInfo","LoginMessage","useSelector","useDispatch","Challenge","dispatch","data","state","login","response","newData","auth","authenticated","user","id","googleId","name","profileObj","givenName","surname","familyName","image","imageUrl","token","tokenId","post","encode","type","badResponseGoogle","renderProps","onClick","disabled"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport base64 from \"base-64\";\nimport apiDatabase from \"../../services/apiDatabase\";\nimport { Data } from \"../Interface\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { BtnGoogle } from \"../Authentication/Authentication\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { LoginInfo, LoginMessage } from \"./LoginMessage\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Challenge: React.FC = () => {\n  const dispatch = useDispatch();\n  const data = useSelector((state: Data) => state.data);\n\n  const login = async (response: any) => {\n    const newData = { data: data };\n    newData.data.auth = {\n      authenticated: true,\n      user: {\n        id: response.googleId,\n        name: response.profileObj.givenName,\n        surname: response.profileObj.familyName,\n        image: response.profileObj.imageUrl,\n      },\n      token: response.tokenId,\n    };\n    await apiDatabase.post(\n      `/user/${response.googleId}/${response.profileObj.givenName}/${\n        response.profileObj.familyName\n      }/${base64.encode(response.profileObj.imageUrl)}`\n    );\n    dispatch({ type: \"LOGIN\", data: newData });\n  };\n\n  const badResponseGoogle = (response: string) => {\n    dispatch({ type: \"BAD_RESPONSE\", data: null });\n  };\n\n  return (\n    <LoginMessage>\n      <Row>\n        <Col xs={12} className=\"text-center\">\n          <LoginInfo>\n            You need to{\" \"}\n            <GoogleLogin\n              clientId=\"156221636932-bvl7ocr3bhrkikgcqc99k4g1a1s0sla1.apps.googleusercontent.com\"\n              buttonText=\"Login\"\n              onSuccess={login}\n              onFailure={badResponseGoogle}\n              cookiePolicy={\"single_host_origin\"}\n              isSignedIn={true}\n              render={(renderProps) => (\n                <BtnGoogle\n                  onClick={renderProps.onClick}\n                  disabled={renderProps.disabled}\n                >\n                  Sign In w/ Google\n                </BtnGoogle>\n              )}\n            />{\" \"}\n            to send your solution!\n          </LoginInfo>\n        </Col>\n      </Row>\n    </LoginMessage>\n  );\n};\n\nexport default Challenge;\n"]},"metadata":{},"sourceType":"module"}