{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from \"react\";\nimport ContestButton from \"../ContestButton\";\nimport ChallengeButton from \"../ChallengeButton\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContainerList, Category } from \"./ContestList\";\n\nvar ContestList = function ContestList() {\n  var dispatch = useDispatch();\n  var data = useSelector(function (state) {\n    return state.data;\n  });\n  var dataTree = useSelector(function (state) {\n    return state.data.tree;\n  });\n\n  var _useState = useState(\"\"),\n      contestsActive = _useState[0],\n      setContestsActive = _useState[1];\n\n  var handleSelectChange = useCallback(function (contest) {\n    var newData = {\n      data: data\n    };\n    newData.data.selectedChallenge = {\n      name: \"\".concat(contest)\n    };\n    dispatch({\n      type: \"CHALLENGE\",\n      data: newData\n    });\n  }, [dispatch, data]);\n\n  var handleVisibleContest = function handleVisibleContest(contest) {\n    if (contestsActive === contest) {\n      setContestsActive(\"\");\n      var newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: \"\"\n      };\n      dispatch({\n        type: \"CHALLENGE\",\n        data: newData\n      });\n    } else {\n      setContestsActive(contest);\n      var _newData = {\n        data: data\n      };\n      _newData.data.selectedChallenge = {\n        name: \"\".concat(contest, \"/\")\n      };\n      dispatch({\n        type: \"CHALLENGE\",\n        data: _newData\n      });\n    }\n  };\n\n  return __jsx(ContainerList, null, __jsx(Category, null, __jsx(\"span\", null, \"Contests\")), __jsx(\"div\", {\n    id: \"listOfContests\"\n  }, dataTree && (dataTree === null || dataTree === void 0 ? void 0 : dataTree.tree.filter(function (contest) {\n    return !contest.path.includes(\".github\") && (contest.path.split(\"/\").length === 1 || contest.path.split(\"/\").length === 2 && contest.path.split(\"/\")[1] !== \"requirements.txt\");\n  }).map(function (contest, i) {\n    return __jsx(\"div\", {\n      key: i\n    }, contest.path.split(\"/\").length === 1 ? __jsx(\"div\", {\n      key: i,\n      id: i.toString(),\n      onClick: function onClick() {\n        return handleVisibleContest(contest.path.split(\"/\")[0]);\n      }\n    }, __jsx(ContestButton, {\n      contestName: contest.path,\n      size: dataTree.tree.filter(function (elem) {\n        return elem.path.includes(contest.path) && elem.path.split(\"/\").length === 2 && elem.path.split(\"/\")[1] !== \"requirements.txt\";\n      }).length\n    })) : contest.path.split(\"/\").length === 2 && contestsActive.includes(contest.path.split(\"/\")[0]) ? __jsx(\"div\", {\n      key: i,\n      id: i.toString(),\n      className: contest.path.split(\"/\")[0],\n      onClick: function onClick() {\n        return handleSelectChange(contest.path);\n      }\n    }, __jsx(ChallengeButton, {\n      challengeName: contest.path\n    })) : __jsx(React.Fragment, null));\n  }))));\n};\n\nexport default ContestList;","map":null,"metadata":{},"sourceType":"module"}