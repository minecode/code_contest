{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport base64 from \"base-64\";\nimport Dropzone from \"react-dropzone\";\nimport apiCodeContest from \"../../services/apiCodeContest\";\nimport apiDatabase from \"../../services/apiDatabase\";\nimport { config } from \"../Utils\";\nimport { useSelector } from \"react-redux\";\nimport { Modal, Spinner, Col, Row } from \"react-bootstrap\";\nimport { Container, ChallengeCodeFiles, SubmitButton, ChallengeCodeFilesZone, Editor } from \"./ChallengeCode\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-dracula\";\n\nconst ChallengeCode = () => {\n  const dataAuth = useSelector(state => state.data.auth);\n  const selectedChallengeName = useSelector(state => state.data.selectedChallenge.name);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: fileName,\n    1: setFileName\n  } = useState(\"\");\n  const {\n    0: inProgress,\n    1: setInProgress\n  } = useState(false);\n  const {\n    0: bodyRequest,\n    1: setBodyRequest\n  } = useState(null);\n  const {\n    0: currentChallengeName,\n    1: setCurrentChallengeName\n  } = useState(\"challenge\");\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  if (selectedChallengeName && selectedChallengeName !== currentChallengeName) {\n    setShow(false);\n    setFileName(\"\");\n    setInProgress(false);\n    setBodyRequest(null);\n    setCurrentChallengeName(selectedChallengeName);\n  }\n\n  const handleChallengeCode = acceptedFile => {\n    setFileName(acceptedFile.map(file => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.addEventListener(\"load\", async () => {\n        if (reader) {\n          const result = reader.result.split(\",\")[1];\n          const bodyRequest = {\n            message: `${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`,\n            committer: {\n              name: \"minecodebot\",\n              email: \"minecode.geral@gmail.com\"\n            },\n            content: `${result}`\n          };\n\n          try {\n            const fileAlreadyExist = await apiDatabase.get(`/contents/${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`);\n            bodyRequest.sha = `${fileAlreadyExist.data.sha}`;\n          } catch (error) {\n            console.log(error);\n          }\n\n          setBodyRequest(bodyRequest);\n        }\n      }, false);\n      return file.name;\n    }));\n  };\n\n  const submitFile = async () => {\n    setInProgress(true);\n    await apiCodeContest.put(`/contents/${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}/resolution.py`, bodyRequest, config);\n  };\n\n  const submitCode = async () => {\n    setInProgress(true);\n    await apiCodeContest.put(`/contents/${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}/resolution.py`, bodyRequest, config);\n  };\n\n  const onChange = async newValue => {\n    const bodyRequest = {\n      message: `${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`,\n      committer: {\n        name: \"minecodebot\",\n        email: \"minecode.geral@gmail.com\"\n      },\n      content: `${base64.encode(newValue)}`\n    };\n\n    try {\n      const fileAlreadyExist = await apiDatabase.get(`/contents/${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`);\n      bodyRequest.sha = `${fileAlreadyExist.data.sha}`;\n    } catch (error) {\n      console.log(error);\n    }\n\n    setBodyRequest(bodyRequest);\n  };\n\n  const uploadRepoCode = async () => {\n    try {\n      const getCodeSended = await apiDatabase.get(`/contents/${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`);\n      const bodyRequest = {\n        message: `${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`,\n        committer: {\n          name: \"minecodebot\",\n          email: \"minecode.geral@gmail.com\"\n        },\n        content: `${getCodeSended.data.content}`\n      };\n      setBodyRequest(bodyRequest);\n    } catch {\n      const bodyRequest = {\n        message: `${selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\")}/${dataAuth.user.id}`,\n        committer: {\n          name: \"minecodebot\",\n          email: \"minecode.geral@gmail.com\"\n        },\n        content: `${base64.encode(\"# Place your code here\")}`\n      };\n      setBodyRequest(bodyRequest);\n    }\n  };\n\n  useEffect(() => {\n    uploadRepoCode(); // eslint-disable-next-line\n  }, [selectedChallengeName]);\n  return __jsx(Container, null, selectedChallengeName && selectedChallengeName.split(\"/\")[1].length > 0 ? __jsx(ChallengeCodeFiles, null, bodyRequest ? __jsx(React.Fragment, null, __jsx(Editor, {\n    debounceChangePeriod: 1000,\n    mode: \"python\",\n    theme: \"dracula\",\n    onChange: onChange,\n    name: \"codeeditor1\",\n    fontSize: 18,\n    showPrintMargin: true,\n    showGutter: true,\n    highlightActiveLine: true,\n    editorProps: {\n      $blockScrolling: true\n    },\n    value: base64.decode(bodyRequest.content),\n    setOptions: {\n      enableBasicAutocompletion: false,\n      enableLiveAutocompletion: false,\n      enableSnippets: false,\n      showLineNumbers: true,\n      tabSize: 2\n    }\n  }), __jsx(SubmitButton, {\n    onClick: () => {\n      submitCode();\n      handleShow();\n    }\n  }, \"Submit code\"), __jsx(\"h2\", null, \"or\")) : __jsx(React.Fragment, null), __jsx(Dropzone, {\n    onDrop: handleChallengeCode\n  }, ({\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragReject\n  }) => {\n    return __jsx(ChallengeCodeFilesZone, getRootProps(), __jsx(\"input\", getInputProps()), __jsx(\"span\", null, isDragActive ? \"📂\" : \"📁\"), __jsx(\"p\", null, fileName ? __jsx(React.Fragment, null, fileName) : isDragReject ? __jsx(React.Fragment, null, \" Invalid file \") : __jsx(React.Fragment, null, \"Drag & ChallengeCode images, or click to select files\")));\n  }), inProgress ? __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    backChallengeCode: \"static\"\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Test in progress...\")), __jsx(Modal.Body, null, __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    className: \"text-center\"\n  }, __jsx(Spinner, {\n    animation: \"border\"\n  })), __jsx(Col, {\n    xs: 12,\n    className: \"text-center\"\n  }, __jsx(\"p\", null, \"We are testing your solution... Soon as possibel, your pontuation will be upadated!!\")))))) : fileName.length > 0 && bodyRequest ? __jsx(SubmitButton, {\n    onClick: () => {\n      submitFile();\n      handleShow();\n    }\n  }, \"Submit file\") : __jsx(React.Fragment, null)) : __jsx(React.Fragment, null));\n};\n\nexport default ChallengeCode;","map":null,"metadata":{},"sourceType":"module"}