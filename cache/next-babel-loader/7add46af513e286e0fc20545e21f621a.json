{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from \"react\";\nimport ContestButton from \"../ContestButton\";\nimport ChallengeButton from \"../ChallengeButton\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContainerList, Category } from \"./ContestList\";\n\nconst ContestList = () => {\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data);\n  const dataTree = useSelector(state => state.data.tree);\n  const {\n    0: contestsActive,\n    1: setContestsActive\n  } = useState(\"\");\n  const handleSelectChange = useCallback(contest => {\n    const newData = {\n      data: data\n    };\n    newData.data.selectedChallenge = {\n      name: `${contest}`\n    };\n    dispatch({\n      type: \"CHALLENGE\",\n      data: newData\n    });\n  }, [dispatch, data]);\n\n  const handleVisibleContest = contest => {\n    if (contestsActive === contest) {\n      setContestsActive(\"\");\n      const newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: \"\"\n      };\n      dispatch({\n        type: \"CHALLENGE\",\n        data: newData\n      });\n    } else {\n      setContestsActive(contest);\n      const newData = {\n        data: data\n      };\n      newData.data.selectedChallenge = {\n        name: `${contest}/`\n      };\n      dispatch({\n        type: \"CHALLENGE\",\n        data: newData\n      });\n    }\n  };\n\n  return __jsx(ContainerList, null, __jsx(Category, null, __jsx(\"span\", null, \"Contests\")), __jsx(\"div\", {\n    id: \"listOfContests\"\n  }, dataTree && (dataTree === null || dataTree === void 0 ? void 0 : dataTree.tree.filter(contest => {\n    return !contest.path.includes(\".github\") && (contest.path.split(\"/\").length === 1 || contest.path.split(\"/\").length === 2 && contest.path.split(\"/\")[1] !== \"requirements.txt\");\n  }).map((contest, i) => __jsx(\"div\", {\n    key: i\n  }, contest.path.split(\"/\").length === 1 ? __jsx(\"div\", {\n    key: i,\n    id: i.toString(),\n    onClick: () => handleVisibleContest(contest.path.split(\"/\")[0])\n  }, __jsx(ContestButton, {\n    contestName: contest.path,\n    size: dataTree.tree.filter(elem => {\n      return elem.path.includes(contest.path) && elem.path.split(\"/\").length === 2 && elem.path.split(\"/\")[1] !== \"requirements.txt\";\n    }).length\n  })) : contest.path.split(\"/\").length === 2 && contestsActive.includes(contest.path.split(\"/\")[0]) ? __jsx(\"div\", {\n    key: i,\n    id: i.toString(),\n    className: contest.path.split(\"/\")[0],\n    onClick: () => handleSelectChange(contest.path)\n  }, __jsx(ChallengeButton, {\n    challengeName: contest.path\n  })) : __jsx(React.Fragment, null))))));\n};\n\nexport default ContestList;","map":null,"metadata":{},"sourceType":"module"}