{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport base64 from \"base-64\";\nimport Dropzone from \"react-dropzone\";\nimport apiCodeContest from \"../../services/apiCodeContest\";\nimport apiDatabase from \"../../services/apiDatabase\";\nimport { config } from \"../Utils\";\nimport { useSelector } from \"react-redux\";\nimport { Modal, Spinner, Col, Row } from \"react-bootstrap\";\nimport { Container, ChallengeCodeFiles, SubmitButton, ChallengeCodeFilesZone, Editor } from \"./ChallengeCode\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-dracula\";\n\nvar ChallengeCode = function ChallengeCode() {\n  var dataAuth = useSelector(function (state) {\n    return state.data.auth;\n  });\n  var selectedChallengeName = useSelector(function (state) {\n    return state.data.selectedChallenge.name;\n  });\n\n  var _useState = useState(false),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      fileName = _useState2[0],\n      setFileName = _useState2[1];\n\n  var _useState3 = useState(false),\n      inProgress = _useState3[0],\n      setInProgress = _useState3[1];\n\n  var _useState4 = useState(null),\n      bodyRequest = _useState4[0],\n      setBodyRequest = _useState4[1];\n\n  var _useState5 = useState(\"challenge\"),\n      currentChallengeName = _useState5[0],\n      setCurrentChallengeName = _useState5[1];\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  if (selectedChallengeName && selectedChallengeName !== currentChallengeName) {\n    setShow(false);\n    setFileName(\"\");\n    setInProgress(false);\n    setBodyRequest(null);\n    setCurrentChallengeName(selectedChallengeName);\n  }\n\n  var handleChallengeCode = function handleChallengeCode(acceptedFile) {\n    setFileName(acceptedFile.map(function (file) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result, _bodyRequest, fileAlreadyExist;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!reader) {\n                  _context.next = 14;\n                  break;\n                }\n\n                result = reader.result.split(\",\")[1];\n                _bodyRequest = {\n                  message: \"\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id),\n                  committer: {\n                    name: \"minecodebot\",\n                    email: \"minecode.geral@gmail.com\"\n                  },\n                  content: \"\".concat(result)\n                };\n                _context.prev = 3;\n                _context.next = 6;\n                return apiDatabase.get(\"/contents/\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id));\n\n              case 6:\n                fileAlreadyExist = _context.sent;\n                _bodyRequest.sha = \"\".concat(fileAlreadyExist.data.sha);\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(_context.t0);\n\n              case 13:\n                setBodyRequest(_bodyRequest);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10]]);\n      })), false);\n      return file.name;\n    }));\n  };\n\n  var submitFile = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setInProgress(true);\n              _context2.next = 3;\n              return apiCodeContest.put(\"/contents/\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id, \"/resolution.py\"), bodyRequest, config);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function submitFile() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var submitCode = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setInProgress(true);\n              _context3.next = 3;\n              return apiCodeContest.put(\"/contents/\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id, \"/resolution.py\"), bodyRequest, config);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function submitCode() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var onChange = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(newValue) {\n      var bodyRequest, fileAlreadyExist;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              bodyRequest = {\n                message: \"\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id),\n                committer: {\n                  name: \"minecodebot\",\n                  email: \"minecode.geral@gmail.com\"\n                },\n                content: \"\".concat(base64.encode(newValue))\n              };\n              _context4.prev = 1;\n              _context4.next = 4;\n              return apiDatabase.get(\"/contents/\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id));\n\n            case 4:\n              fileAlreadyExist = _context4.sent;\n              bodyRequest.sha = \"\".concat(fileAlreadyExist.data.sha);\n              _context4.next = 11;\n              break;\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.log(_context4.t0);\n\n            case 11:\n              setBodyRequest(bodyRequest);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 8]]);\n    }));\n\n    return function onChange(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var uploadRepoCode = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var getCodeSended, _bodyRequest2, _bodyRequest3;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return apiDatabase.get(\"/contents/\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id));\n\n            case 3:\n              getCodeSended = _context5.sent;\n              _bodyRequest2 = {\n                message: \"\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id),\n                committer: {\n                  name: \"minecodebot\",\n                  email: \"minecode.geral@gmail.com\"\n                },\n                content: \"\".concat(getCodeSended.data.content)\n              };\n              setBodyRequest(_bodyRequest2);\n              _context5.next = 12;\n              break;\n\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](0);\n              _bodyRequest3 = {\n                message: \"\".concat(selectedChallengeName === null || selectedChallengeName === void 0 ? void 0 : selectedChallengeName.split(\" \").join(\"_\"), \"/\").concat(dataAuth.user.id),\n                committer: {\n                  name: \"minecodebot\",\n                  email: \"minecode.geral@gmail.com\"\n                },\n                content: \"\".concat(base64.encode(\"# Place your code here\"))\n              };\n              setBodyRequest(_bodyRequest3);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 8]]);\n    }));\n\n    return function uploadRepoCode() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    uploadRepoCode(); // eslint-disable-next-line\n  }, [selectedChallengeName]);\n  return __jsx(Container, null, selectedChallengeName && selectedChallengeName.split(\"/\")[1].length > 0 ? __jsx(ChallengeCodeFiles, null, bodyRequest ? __jsx(React.Fragment, null, __jsx(Editor, {\n    debounceChangePeriod: 1000,\n    mode: \"python\",\n    theme: \"dracula\",\n    onChange: onChange,\n    name: \"codeeditor1\",\n    fontSize: 18,\n    showPrintMargin: true,\n    showGutter: true,\n    highlightActiveLine: true,\n    editorProps: {\n      $blockScrolling: true\n    },\n    value: base64.decode(bodyRequest.content),\n    setOptions: {\n      enableBasicAutocompletion: false,\n      enableLiveAutocompletion: false,\n      enableSnippets: false,\n      showLineNumbers: true,\n      tabSize: 2\n    }\n  }), __jsx(SubmitButton, {\n    onClick: function onClick() {\n      submitCode();\n      handleShow();\n    }\n  }, \"Submit code\"), __jsx(\"h2\", null, \"or\")) : __jsx(React.Fragment, null), __jsx(Dropzone, {\n    onDrop: handleChallengeCode\n  }, function (_ref6) {\n    var getRootProps = _ref6.getRootProps,\n        getInputProps = _ref6.getInputProps,\n        isDragActive = _ref6.isDragActive,\n        isDragReject = _ref6.isDragReject;\n    return __jsx(ChallengeCodeFilesZone, getRootProps(), __jsx(\"input\", getInputProps()), __jsx(\"span\", null, isDragActive ? \"📂\" : \"📁\"), __jsx(\"p\", null, fileName ? __jsx(React.Fragment, null, fileName) : isDragReject ? __jsx(React.Fragment, null, \" Invalid file \") : __jsx(React.Fragment, null, \"Drag & ChallengeCode images, or click to select files\")));\n  }), inProgress ? __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    backChallengeCode: \"static\"\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Test in progress...\")), __jsx(Modal.Body, null, __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    className: \"text-center\"\n  }, __jsx(Spinner, {\n    animation: \"border\"\n  })), __jsx(Col, {\n    xs: 12,\n    className: \"text-center\"\n  }, __jsx(\"p\", null, \"We are testing your solution... Soon as possibel, your pontuation will be upadated!!\")))))) : fileName.length > 0 && bodyRequest ? __jsx(SubmitButton, {\n    onClick: function onClick() {\n      submitFile();\n      handleShow();\n    }\n  }, \"Submit file\") : __jsx(React.Fragment, null)) : __jsx(React.Fragment, null));\n};\n\nexport default ChallengeCode;","map":null,"metadata":{},"sourceType":"module"}